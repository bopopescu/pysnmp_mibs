# PySNMP SMI module. Autogenerated from smidump -f python NETSCREEN-TRAP-MIB
# by libsmi2pysnmp-0.1.3 at Fri Aug  1 21:42:33 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( netscreenTrap, netscreenTrapInfo, ) = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenTrap", "netscreenTrapInfo")
( Bits, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

netscreenTrapMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 2, 0)).setRevisions(("2008-03-17 00:00","2005-10-17 00:00","2005-03-03 20:22","2005-03-03 00:00","2004-09-10 00:00","2004-05-03 00:00","2004-03-03 00:00","2004-01-23 00:00","2001-09-28 00:00","2000-08-02 00:00",))
if mibBuilder.loadTexts: netscreenTrapMibModule.setOrganization("Juniper Networks, Inc.")
if mibBuilder.loadTexts: netscreenTrapMibModule.setContactInfo("Customer Support\n\n1194 North Mathilda Avenue \nSunnyvale, California 94089-1206\nUSA\n\nTel: 1-800-638-8296\nE-mail: customerservice@juniper.net\nHTTP://www.juniper.net")
if mibBuilder.loadTexts: netscreenTrapMibModule.setDescription("Added trap types 15, it is still in use")
netscreenTrapType = MibScalar((1, 3, 6, 1, 4, 1, 3224, 2, 1), Integer().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(26,83,76,409,19,37,112,18,226,436,431,39,206,81,32,426,41,205,60,72,427,85,71,23,806,441,805,54,80,700,31,50,225,35,27,14,7,804,63,70,13,231,42,400,412,200,5,802,73,419,202,402,223,61,82,65,4,74,102,95,554,703,443,40,423,214,218,230,702,78,216,422,209,433,93,53,219,75,88,103,79,77,751,414,17,113,36,442,43,211,51,90,64,706,227,228,217,602,33,418,221,404,415,49,48,2,413,429,425,44,62,46,201,11,34,96,47,105,601,430,210,417,16,220,411,25,29,), SingleValueConstraint(28,600,45,434,204,111,66,84,401,408,222,420,212,91,432,424,701,12,800,101,416,94,215,30,20,22,405,87,24,803,110,410,224,208,407,86,801,403,406,203,114,213,52,3,15,9,1,850,89,21,207,229,705,752,428,435,6,421,10,92,8,))).subtype(namedValues=NamedValues(("traffic-sec", 1), ("land", 10), ("ip-addr-event", 101), ("dip-util-raise", 102), ("dip-util-clear", 103), ("dot1x-alarm", 105), ("icmp-flood", 11), ("vpn-ias-radius-error", 110), ("vpn-ikeid-enum-attack", 111), ("vpn-softlimit-reached", 112), ("vpn-ikedos-attack", 113), ("vpn-acvpn-profile-error", 114), ("udp-flood", 12), ("illegal-cms-svr", 13), ("url-block-srv", 14), ("high-availability", 15), ("port-scan", 16), ("addr-sweep", 17), ("deny-policy", 18), ("device-dead", 19), ("traffic-min", 2), ("low-memory", 20), ("route-sys-entry-ex", 200), ("route-vr-entry-ex", 201), ("route-ospf-hello-flood", 202), ("route-ospf-lsa-flood", 203), ("route-rip-update-flood", 204), ("route-alarm", 205), ("ospf-flood", 206), ("rip-flood", 207), ("bgp-established", 208), ("bgp-backwardtransition", 209), ("dns-srv-down", 21), ("ospf-virtifstatechange", 210), ("ospf-nbrstatechange", 211), ("ospf-virtnbrstatechange", 212), ("ospf-ifconfigerror", 213), ("ospf-virtifconfigerror", 214), ("ospf-ifauthfailure", 215), ("ospf-virtifauthfailure", 216), ("ospf-ifrxbadpacket", 217), ("ospf-virtifrxbadpacket", 218), ("ospf-txretransmit", 219), ("generic-HW-fail", 22), ("ospf-virtiftxretransmit", 220), ("ospf-originatelsa", 221), ("ospf-maxagelsa", 222), ("ospf-lsdboverflow", 223), ("ospf-lsdbapproachingoverflow", 224), ("ospf-ifstatechange", 225), ("bgp-alarm", 226), ("ripng-flood", 227), ("route-ripng-update-flood", 228), ("pbr-alarm", 229), ("lb-srv-down", 23), ("nhrp-alarm", 230), ("ospfv3-alarm", 231), ("log-full", 24), ("x509", 25), ("vpn-ike", 26), ("admin", 27), ("sme", 28), ("dhcp", 29), ("multi-auth-fail", 3), ("cpu-usage-high", 30), ("ip-conflict", 31), ("attact-malicious-url", 32), ("session-threshold", 33), ("ssh-alarm", 34), ("audit-storage", 35), ("memory-normal", 36), ("cpu-usage-normal", 37), ("rxbd-low-alarm", 39), ("winnuke", 4), ("vpn-tunnel-up", 40), ("ids-component", 400), ("ids-icmp-flood", 401), ("ids-udp-flood", 402), ("ids-winnuke", 403), ("ids-port-scan", 404), ("ids-addr-sweep", 405), ("ids-tear-drop", 406), ("ids-syn", 407), ("ids-ip-spoofing", 408), ("ids-ping-death", 409), ("vpn-tunnel-down", 41), ("ids-ip-source-route", 410), ("ids-land", 411), ("syn-frag-attack", 412), ("tcp-without-flag", 413), ("unknow-ip-packet", 414), ("bad-ip-option", 415), ("ip-option-record", 416), ("ip-option-timestamp", 417), ("ip-option-scht", 418), ("ip-option-lsr", 419), ("vpn-replay-attack", 42), ("ip-option-ssr", 420), ("ip-option-stream", 421), ("icmp-fragment", 422), ("too-large-icmp", 423), ("tcp-syn-fin", 424), ("tcp-fin-no-ack", 425), ("tcp-mal-url", 426), ("tcp-sess-mal-num", 427), ("ids-tcp-syn-ack-ack", 428), ("ids-ip-block-frag", 429), ("vpn-l2tp-tunnel-remove", 43), ("dst-ip-session-limit", 430), ("ids-block-zip", 431), ("ids-block-jar", 432), ("ids-block-exe", 433), ("ids-block-activex", 434), ("tcp-syn-mac", 435), ("ids-nac-attack", 436), ("vpn-l2tp-tunnel-remove-err", 44), ("ids-icmp-ping-id-zero", 441), ("tcp-sweep", 442), ("udp-sweep", 443), ("vpn-l2tp-call-remove", 45), ("vpn-l2tp-call-remove-err", 46), ("vpn-ias-too-many", 47), ("vpn-ias-over-threshold", 48), ("vpn-ias-under-threshold", 49), ("syn-attack", 5), ("vpn-ias-ike-error", 50), ("allocated-session-threshold", 51), ) + NamedValues(("av-csp-alarm", 52), ("av-alarm", 53), ("apppry-alarm", 54), ("av-scan-mgr", 554), ("tear-drop", 6), ("nsrp-rto-up", 60), ("mcast-base", 600), ("mcore-alarm", 601), ("spim-alarm", 602), ("nsrp-rto-down", 61), ("nsrp-trackip-success", 62), ("nsrp-trackip-failed", 63), ("nsrp-trackip-failover", 64), ("nsrp-inconsistent-configuration", 65), ("trackip-status", 66), ("ping-death", 7), ("nsrp-vsd-init", 70), ("sm-base", 700), ("sm-down", 701), ("sm-packet-drop", 702), ("sm-overload", 703), ("sm-cpu-unresponsive", 705), ("sm-policy-abnormal", 706), ("nsrp-vsd-main", 71), ("nsrp-vsd-pbackup", 72), ("nsrp-vsd-backup", 73), ("nsrp-vsd-ineligible", 74), ("nsrp-vsd-inoperable", 75), ("switch", 751), ("sfp", 752), ("nsrp-vsd-req-hearbeat-2nd", 76), ("nsrp-vsd-reply-2nd", 77), ("nsrp-rto-duplicated", 78), ("ip-dup-main", 79), ("ip-spoofing", 8), ("di-heap-create-fail", 80), ("cpu-limit-s2f-forced", 800), ("cpu-limit-s2f-auto", 801), ("cpu-limit-f2s-forced", 802), ("cpu-limit-f2s-timeout", 803), ("cpu-limit-f2s-auto", 804), ("sec-potential-voilation", 805), ("flow-sess-cache", 806), ("mem-alloc-fail", 81), ("vrrp-status-alarm", 82), ("sccp-alarm", 83), ("mgcp-reinit", 84), ("mlfr-alarm", 85), ("vsys-session-limit", 850), ("fr-alarm", 86), ("cisco-hdlc-alarm", 87), ("pppow-alarm", 88), ("h323-alarm", 89), ("ip-src-route", 9), ("isdn-alarm", 90), ("interface-backup", 91), ("wan-card-function", 92), ("usb-device-operation", 93), ("interface-failure", 94), ("ppp-no-ip-cfg", 95), ("ppp-no-ip-in-pool", 96), ))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: netscreenTrapType.setDescription("The integer value of the raised alarm type. Note that the type\nshould be interpreted within a specific trap")
netscreenTrapDesc = MibScalar((1, 3, 6, 1, 4, 1, 3224, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: netscreenTrapDesc.setDescription("The textual description of the alarm")

# Augmentions

# Notifications

netscreenTrapHw = NotificationType((1, 3, 6, 1, 4, 1, 3224, 0, 100)).setObjects(*(("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ) )
if mibBuilder.loadTexts: netscreenTrapHw.setDescription("This trap indicates that some kind of hardware problem has\noccured.")
netscreenTrapFw = NotificationType((1, 3, 6, 1, 4, 1, 3224, 0, 200)).setObjects(*(("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ) )
if mibBuilder.loadTexts: netscreenTrapFw.setDescription("This trap indicates that some kind of firewall functions has\nbeen triggered.")
netscreenTrapSw = NotificationType((1, 3, 6, 1, 4, 1, 3224, 0, 300)).setObjects(*(("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ) )
if mibBuilder.loadTexts: netscreenTrapSw.setDescription("This trap indicates that some kind of software problem has\noccured.")
netscreenTrapTrf = NotificationType((1, 3, 6, 1, 4, 1, 3224, 0, 400)).setObjects(*(("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ) )
if mibBuilder.loadTexts: netscreenTrapTrf.setDescription("This trap indicates that some kind of traffic conditions has\nbeen triggered.")
netscreenTrapVpn = NotificationType((1, 3, 6, 1, 4, 1, 3224, 0, 500)).setObjects(*(("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ) )
if mibBuilder.loadTexts: netscreenTrapVpn.setDescription("This trap indicates that VPN tunnel status has occured.")
netscreenTrapNsrp = NotificationType((1, 3, 6, 1, 4, 1, 3224, 0, 600)).setObjects(*(("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ) )
if mibBuilder.loadTexts: netscreenTrapNsrp.setDescription("This trap indicates that NSRP status has occured.")
netscreenTrapGPRO = NotificationType((1, 3, 6, 1, 4, 1, 3224, 0, 700)).setObjects(*(("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ) )
if mibBuilder.loadTexts: netscreenTrapGPRO.setDescription("This trap indicates that some kind of Global PRO problems has\noccurred.")
netscreenTrapDrp = NotificationType((1, 3, 6, 1, 4, 1, 3224, 0, 800)).setObjects(*(("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ) )
if mibBuilder.loadTexts: netscreenTrapDrp.setDescription("This trap indicates that Drp status has occured.")
netscreenTrapIFFailover = NotificationType((1, 3, 6, 1, 4, 1, 3224, 0, 900)).setObjects(*(("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ) )
if mibBuilder.loadTexts: netscreenTrapIFFailover.setDescription("This trap indicates that interface fail over status has\noccured.")
netscreenTrapIDPAttack = NotificationType((1, 3, 6, 1, 4, 1, 3224, 0, 1000)).setObjects(*(("NETSCREEN-TRAP-MIB", "netscreenTrapType"), ("NETSCREEN-TRAP-MIB", "netscreenTrapDesc"), ) )
if mibBuilder.loadTexts: netscreenTrapIDPAttack.setDescription("This trap indicates that IDP attack status has occured.")

# Exports

# Module identity
mibBuilder.exportSymbols("NETSCREEN-TRAP-MIB", PYSNMP_MODULE_ID=netscreenTrapMibModule)

# Objects
mibBuilder.exportSymbols("NETSCREEN-TRAP-MIB", netscreenTrapMibModule=netscreenTrapMibModule, netscreenTrapType=netscreenTrapType, netscreenTrapDesc=netscreenTrapDesc)

# Notifications
mibBuilder.exportSymbols("NETSCREEN-TRAP-MIB", netscreenTrapHw=netscreenTrapHw, netscreenTrapFw=netscreenTrapFw, netscreenTrapSw=netscreenTrapSw, netscreenTrapTrf=netscreenTrapTrf, netscreenTrapVpn=netscreenTrapVpn, netscreenTrapNsrp=netscreenTrapNsrp, netscreenTrapGPRO=netscreenTrapGPRO, netscreenTrapDrp=netscreenTrapDrp, netscreenTrapIFFailover=netscreenTrapIFFailover, netscreenTrapIDPAttack=netscreenTrapIDPAttack)

