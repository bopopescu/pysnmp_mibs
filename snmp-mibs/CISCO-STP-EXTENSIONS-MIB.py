# PySNMP SMI module. Autogenerated from smidump -f python CISCO-STP-EXTENSIONS-MIB
# by libsmi2pysnmp-0.1.3 at Thu Sep 18 20:41:14 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( dot1dStpPortEntry, ) = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dStpPortEntry")
( ciscoMgmt, ) = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
( VlanIndex, vlanTrunkPortEntry, vtpVlanEditEntry, vtpVlanEntry, ) = mibBuilder.importSymbols("CISCO-VTP-MIB", "VlanIndex", "vlanTrunkPortEntry", "vtpVlanEditEntry", "vtpVlanEntry")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Counter32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, RowStatus, TextualConvention, TimeStamp, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TimeStamp", "TruthValue")

# Types

class StpxMSTConfigurationDigest(TextualConvention, OctetString):
    displayHint = "1x"
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(16,16)
    fixedLength = 16
    

# Objects

ciscoStpExtensionsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 82)).setRevisions(("2013-03-07 00:00","2005-12-20 00:00","2005-04-12 00:00","2004-07-21 00:00","2004-04-08 00:00","2004-01-14 00:00","2003-10-23 00:00","2002-07-11 00:00","2001-12-06 00:00","2001-09-14 00:00","2001-06-20 00:00","2001-04-12 00:00","2000-05-23 00:00","2000-03-21 00:00","1997-11-10 12:00","1997-08-19 12:00",))
if mibBuilder.loadTexts: ciscoStpExtensionsMIB.setOrganization("Cisco Systems, Inc.")
if mibBuilder.loadTexts: ciscoStpExtensionsMIB.setContactInfo("       Cisco Systems\nCustomer Service\n\nPostal: 170 W Tasman Drive\nSan Jose, CA  95134\nUSA\n\nTel: +1 800 553-NETS\n\nE-mail: cs-wbu@cisco.com")
if mibBuilder.loadTexts: ciscoStpExtensionsMIB.setDescription("The MIB module for managing Cisco extensions to\nthe 802.1D Spanning Tree Protocol (STP).")
stpxObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1))
stpxUplinkFastObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 1))
stpxUplinkFastEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxUplinkFastEnabled.setDescription("An indication of whether the UplinkFast capability is\nadministratively enabled on the device.\n\nIf the platform does not support configuration of this\nobject when the object value of stpxSpanningTreeType is \nmst(4), then this object is not instantiated.")
stpxUplinkFastTransitions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 1, 2), Counter32()).setMaxAccess("readonly").setUnits("transitions")
if mibBuilder.loadTexts: stpxUplinkFastTransitions.setDescription("The cumulative number of UplinkFast transitions (from\nthe STP 'Blocking' state directly to the STP 'Forwarding'\nstate).  All transitions are included in this counter,\nirrespective of the instance of the Spanning Tree \nProtocol on which they occur.\n\nIf the platform supports the stpxUplinkFastOperEnabled \nobject, then this object is not instantiated when the \nobject value of stpxUplinkFastOperEnabled is false(2).\nIf the platform does not support the \nstpxUplinkFastOperEnabled object, then this object is \nnot instantiated when the object value of \nstpxSpanningTreeType is mst(4).")
stpxUplinkStationLearningGenRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite").setUnits("frames")
if mibBuilder.loadTexts: stpxUplinkStationLearningGenRate.setDescription("The maximum number of station-learning frames that this\ndevice will generate in each 100 milli-second period after\na UplinkFast transition.  By configuring this object, the\nnetwork administrator can limit the rate at which\nstation-learning frames are generated.  \n\nIf the platform does not support configuration of this\nobject when the object value of stpxSpanningTreeType is\nmst(4), then this object is not instantiated.")
stpxUplinkStationLearningFrames = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 1, 4), Counter32()).setMaxAccess("readonly").setUnits("frames")
if mibBuilder.loadTexts: stpxUplinkStationLearningFrames.setDescription("The cumulative number of station-learning frames generated\ndue to UplinkFast transitions.  All generated\nstation-learning frames are included in this counter,\nirrespective of the instance of the Spanning Tree Protocol\non which the UplinkFast transition occurred.\n\nIf the platform supports the stpxUplinkFastOperEnabled \nobject, then this object is not instantiated when the \nobject value of stpxUplinkFastOperEnabled is false(2).\nIf the platform does not support the \nstpxUplinkFastOperEnabled object, then this object is \nnot instantiated when the object value of \nstpxSpanningTreeType is mst(4).")
stpxUplinkFastOperEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxUplinkFastOperEnabled.setDescription("An indication of whether the UplinkFast capability is \noperationally enabled on the device.")
stpxVlanObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 2))
stpxPreferredVlansTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 2, 1))
if mibBuilder.loadTexts: stpxPreferredVlansTable.setDescription("The table containing indications of which VLANs are\npreferred on which VLAN trunk ports.  The preferred\nVLANs on a trunk port have a lower Path Cost value\ncompared with the VLANs on the trunk not in the\npreferred list. If the value of stpxSpanningTreeType \nis neither pvstPlus(1) nor rapidPvstPlus(5), the \nconfiguration in this table has no effect. ")
stpxPreferredVlansEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 2, 1, 1))
if mibBuilder.loadTexts: stpxPreferredVlansEntry.setDescription("An entry indicating which VLANs are preferred on a\nspecific VLAN trunk port.")
stpxPreferredVlansMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxPreferredVlansMap.setDescription("A string of octets containing one bit per VLAN in the\nmanagement domain on this trunk port.  The first octet\ncorresponds to VLANs with VlanIndex values of 0 through 7;\nthe second octet to VLANs 8 through 15; etc.  The most\nsignificant bit of each octet corresponds to the lowest\nvalue VlanIndex in that octet.\n\nFor each VLAN, if it is preferred on this trunk port, then\nthe bit corresponding to that VLAN is set to '1'.\nThe default value is 128 bytes of zeros.\n\nTo avoid conflicts between overlapping partial updates by\nmultiple managers, i.e., updates which modify only a portion\nof an instance of this object (e.g., enable/disable a single\nVLAN on the trunk port), any SNMP Set operation accessing an\ninstance of this object should also write the value of\nvlanTrunkPortSetSerialNo.")
stpxPreferredVlansMap2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxPreferredVlansMap2k.setDescription("A string of octets containing one bit per VLAN for VLANS \nwith VlanIndex values of 1024 through 2047 in the management\ndomain on this trunk port.  The first octet corresponds to \nVLANs with VlanIndex values of 1024 through 1031; \nthe second octet to VLANs 1032 through 1039; etc. \nThe most significant bit of each octet corresponds to the \nlowest value VlanIndex in that octet. \n\nFor each VLAN, if it is preferred on this trunk port, then \nthe bit corresponding to that VLAN is set to '1'. \nThe default value is 128 bytes of zeros. \n\nTo avoid conflicts between overlapping partial updates by \nmultiple managers, i.e., updates which modify only a portion\nof an instance of this object (e.g., enable/disable a single\nVLAN on the trunk port), any SNMP Set operation accessing an\ninstance of this object should also write the value of \nvlanTrunkPortSetSerialNo.")
stpxPreferredVlansMap3k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxPreferredVlansMap3k.setDescription("A string of octets containing one bit per VLAN for VLANS \nwith VlanIndex values of 2048 through 3071 in the management\ndomain on this trunk port.  The first octet corresponds to \nVLANs with VlanIndex values of 2048 through 2055; \nthe second octet to VLANs 2056 through 2063; etc. \nThe most significant bit of each octet corresponds to the \nlowest value VlanIndex in that octet. \n\nFor each VLAN, if it is preferred on this trunk port, then \nthe bit corresponding to that VLAN is set to '1'. \nThe default value is 128 bytes of zeros. \n\nTo avoid conflicts between overlapping partial updates by \nmultiple managers, i.e., updates which modify only a portion\nof an instance of this object (e.g., enable/disable a single\nVLAN on the trunk port), any SNMP Set operation accessing an\ninstance of this object should also write the value of \nvlanTrunkPortSetSerialNo.")
stpxPreferredVlansMap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxPreferredVlansMap4k.setDescription("A string of octets containing one bit per VLAN for VLANS \nwith VlanIndex values of 3072 through 4095 in the management\ndomain on this trunk port.  The first octet corresponds to \nVLANs with VlanIndex values of 3072 through 3079; \nthe second octet to VLANs 3080 through 3087; etc. \nThe most significant bit of each octet corresponds to the \nlowest value VlanIndex in that octet. \n\nFor each VLAN, if it is preferred on this trunk port, then \nthe bit corresponding to that VLAN is set to '1'. \nThe default value is 128 bytes of zeros. \n\nTo avoid conflicts between overlapping partial updates by \nmultiple managers, i.e., updates which modify only a portion\nof an instance of this object (e.g., enable/disable a single\nVLAN on the trunk port), any SNMP Set operation accessing an\ninstance of this object should also write the value of \nvlanTrunkPortSetSerialNo.")
stpxPVSTVlanTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 2, 2))
if mibBuilder.loadTexts: stpxPVSTVlanTable.setDescription("A list of Virtual LAN entries containing\ninformation for Spanning Tree PVST+ protocol. \nAn entry will exist for each VLAN existing on \nthe device.")
stpxPVSTVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 2, 2, 1)).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxPVSTVlanIndex"))
if mibBuilder.loadTexts: stpxPVSTVlanEntry.setDescription("An entry containing Spanning Tree PVST+ Protocol \ninformation for a particular Virtual LAN.")
stpxPVSTVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 2, 2, 1, 1), VlanIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxPVSTVlanIndex.setDescription("An index value that uniquely identifies the\nVirtual LAN associated with this information.")
stpxPVSTVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 2, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxPVSTVlanEnable.setDescription("Indicates whether Spanning Tree PVST+  \nProtocol is enabled for this Virtual LAN. If \nSpanning Tree PVST+ Protocol is not supported \non this VLAN, then notApplicable(3) will be \nreturned while retrieving the object value for \nthis VLAN.\n\nIf the device only supports a single global\nSpanning Tree PVST+ Protocol enable/disable \nfor all the existing VLANs, then the object \nvalue assigned to this VLAN will be applied\nto the object values of all the instances\nin this table which do not have the value\nof notApplicable(3).\n\nIf the value of stpxSpanningTreeType is neither \npvstPlus(1) nor rapidPvstPlus(5), then the value \nof stpxPVSTVlanEnable for this VLAN can not be \nchanged.")
stpxInconsistencyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 3))
stpxInconsistencyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 3, 1))
if mibBuilder.loadTexts: stpxInconsistencyTable.setDescription("A table containing a list of the ports for which\na particular VLAN's Spanning Tree has been found to\nhave an inconsistency.  Two types of inconsistency\nare discovered: 1) an inconsistency where two different\nport types have been plugged together; and 2) an\ninconsistency where different switches have different\nPVIDs for the same link.")
stpxInconsistencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 3, 1, 1)).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxVlanIndex"), (0, "CISCO-STP-EXTENSIONS-MIB", "stpxPortIndex"))
if mibBuilder.loadTexts: stpxInconsistencyEntry.setDescription("A VLAN on a particular port for which a Spanning Tree\ninconsistency is currently in effect.")
stpxVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 3, 1, 1, 1), VlanIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxVlanIndex.setDescription("The VLAN id of the VLAN.")
stpxPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxPortIndex.setDescription("The value of dot1dBasePort (i.e. dot1dBridge.1.4)\nfor the bridge port.")
stpxInconsistentState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 3, 1, 1, 3), Bits().subtype(namedValues=NamedValues(("typeInconsistent", 0), ("pvidInconsistent", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxInconsistentState.setDescription("The types of inconsistency which have been discovered on\nthis port for this VLAN's Spanning Tree.\n\nWhen this object exists, the value of the corresponding\ninstance of the Bridge MIB's dot1dStpPortState object will\nbe 'broken(6)'.")
stpxBackboneFastObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 4))
stpxBackboneFastEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxBackboneFastEnabled.setDescription("An indication of whether the BackboneFast capability is\nadministratively enabled on the device.")
stpxBackboneFastInInferiorBPDUs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxBackboneFastInInferiorBPDUs.setDescription("The number of inferior BPDUs received by the switch \nsince the stpxBackboneFastOperEnabled has\nbecome true(1). If the value of \nstpxBackboneFastOperEnabled is false(2), then this \nmib object will have a value of 0.")
stpxBackboneFastInRLQRequestPDUs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxBackboneFastInRLQRequestPDUs.setDescription("The number of Root Link Query request PDUs received by the\nswitch since the stpxBackboneFastOperEnabled has become\ntrue(1). If the value of stpxBackboneFastOperEnabled is\nfalse(2), then this mib object will have a value of 0.")
stpxBackboneFastInRLQResponsePDUs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxBackboneFastInRLQResponsePDUs.setDescription("The number of Root Link Query response PDUs received by the\nswitch since the stpxBackboneFastOperEnabled has become\ntrue(1). If the value of stpxBackboneFastOperEnabled is\nfalse(2), then this mib object will have a value of 0.")
stpxBackboneFastOutRLQRequestPDUs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxBackboneFastOutRLQRequestPDUs.setDescription("The number of Root Link Query request PDUs transmitted by\nthe switch since the stpxBackboneFastOperEnabled has become\ntrue(1). If the value of stpxBackboneFastOperEnabled is\nfalse(2), then this mib object will have a value of 0.")
stpxBackboneFastOutRLQResponsePDUs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxBackboneFastOutRLQResponsePDUs.setDescription("The number of Root Link Query response PDUs transmitted by\nthe switch since the stpxBackboneFastOperEnabled has become\ntrue(1). If the value of stpxBackboneFastOperEnabled is\nfalse(2), then this mib object will have a value of 0.")
stpxBackboneFastOperEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 4, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxBackboneFastOperEnabled.setDescription("An indication of whether the BackboneFast capability is\noperationally enabled on the device.")
stpxRootGuardObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 5))
stpxRootGuardConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 5, 1))
if mibBuilder.loadTexts: stpxRootGuardConfigTable.setDescription("A table containing a list of the bridge ports for which\nSpanning Tree RootGuard capability can be configured.")
stpxRootGuardConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 5, 1, 1)).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxRootGuardConfigPortIndex"))
if mibBuilder.loadTexts: stpxRootGuardConfigEntry.setDescription("A bridge port for which Spanning Tree RootGuard\ncapability can be configured.")
stpxRootGuardConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxRootGuardConfigPortIndex.setDescription("The value of dot1dBasePort (i.e. dot1dBridge.1.4)\nfor the bridge port.")
stpxRootGuardConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 5, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxRootGuardConfigEnabled.setDescription("An indication of whether the RootGuard capability is \nenabled on this port or not. This configuration will be\napplied to all Spanning Tree instances in which this port \nexists.")
stpxRootInconsistencyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 5, 2))
if mibBuilder.loadTexts: stpxRootInconsistencyTable.setDescription("A table containing a list of the bridge ports for which\na particular Spanning Tree instance has been found \nto have an root-inconsistency. The agent creates a new \nentry in this table whenever it detects a new \nroot-inconsistency, and deletes entries \nwhen/soon after the inconsistency is no longer present.")
stpxRootInconsistencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 5, 2, 1)).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyIndex"), (0, "CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyPortIndex"))
if mibBuilder.loadTexts: stpxRootInconsistencyEntry.setDescription("A Spanning Tree instance on a particular port for \nwhich a Spanning Tree root-inconsistency is currently \nin effect.")
stpxRootInconsistencyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxRootInconsistencyIndex.setDescription("The Spanning Tree instance id, such as the VLAN id\nof the VLAN if the object value of stpxSpanningTreeType\nis pvstPlus(1) or rapidPvstPlus(5).")
stpxRootInconsistencyPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxRootInconsistencyPortIndex.setDescription("The value of dot1dBasePort (i.e. dot1dBridge.1.4)\nfor the bridge port.")
stpxRootInconsistencyState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 5, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxRootInconsistencyState.setDescription("Indicates whether the port on a particular Spanning \nTree instance is currently in root-inconsistent \nstate or not.")
stpxSpanningTreeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 6))
stpxSpanningTreeType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 6, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(3,5,2,4,1,)).subtype(namedValues=NamedValues(("pvstPlus", 1), ("mistp", 2), ("mistpPvstPlus", 3), ("mst", 4), ("rapidPvstPlus", 5), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxSpanningTreeType.setDescription("The actual mode of spanning tree protocol runs\non the  device. It can be one of the following:\n\npvstPlus -- PVST+ (Per VLAN Spanning Tree+ Protocol).\n\nmistp -- MISTP (Multi Instance Spanning Tree Protocol).\n\nmistpPvstPlus --  MISTP with the tunneling scheme\n                     enabled for PVST+.\n\nmst -- IEEE 802.1s Multiple Spanning Tree (MST)\n       with IEEE 802.1w Rapid Spanning Tree Protocol\n       (RSTP).\n\nrapidPvstPlus -- IEEE 802.1w Rapid Spanning Tree \n        Protocol (RSTP) for all vlans in PVST+.\n\nWhen the value of this MIB object gets changed, the \nnetwork connectivity would be affected and the \nconnectivity to this device would also be lost \ntemporarily.")
stpxSpanningTreePathCostMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 6, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("short", 1), ("long", 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxSpanningTreePathCostMode.setDescription("Indicates the administrative  spanning tree path cost mode \nconfigured on device.")
stpxLongStpPortPathCostTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 6, 3))
if mibBuilder.loadTexts: stpxLongStpPortPathCostTable.setDescription("A table containing the spanning tree port path cost\nconfiguration when stpxSpanningTreePathCostOperMode is\nlong(2).\n\nIf the value of stpxSpanningTreePathCostOperMode is \nshort(1), this table is not instantiated.")
stpxLongStpPortPathCostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 6, 3, 1))
if mibBuilder.loadTexts: stpxLongStpPortPathCostEntry.setDescription("A conceptual row containing the spanning tree port path cost\nconfiguration.")
stpxLongStpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 6, 3, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxLongStpPortPathCost.setDescription("The contribution of this port to the path cost (in 32\nbits value) of paths towards the spanning tree root which\ninclude this port.\n\nThis object is used to configure the spanning tree port\npath cost in 32 bits value range when the\nstpxSpanningTreePathCostOperMode is long(2).\n\nIf the stpxSpanningTreePathCostOperMode is short(1), this \nMIB object is not instantiated.")
stpxExtendedSysIDAdminEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 6, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxExtendedSysIDAdminEnabled.setDescription("Indicates whether Extended System ID feature \nis administratively enabled on the device or not.")
stpxExtendedSysIDOperEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 6, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxExtendedSysIDOperEnabled.setDescription("Indicates whether Extended System ID feature \nis operationaly enabled on the device or not.\n\nIf the value of this object is true(1), then\nthe accepted values for dot1dStpPriority\nin BRIDGE-MIB should be multiples of 4096 plus\nbridge instance ID, such as VlanIndex. Changing\nthis object value might cause the values of\ndot1dBaseBridgeAddress and dot1dStpPriority\nin BRIDGE-MIB to be changed also.")
stpxNotificationEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 6, 6), Bits().subtype(namedValues=NamedValues(("newRoot", 0), ("topologyChange", 1), ("inconsistency", 2), ("rootInconsistency", 3), ("loopInconsistency", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxNotificationEnable.setDescription("Indicates whether a specified notification is enabled or not.\nIf a bit corresponding to a notification is set to 1, then \nthe specified notification can be generated.\n\nnewRoot -- the newRoot notification as defined in BRIDGE-MIB.\n\ntopologyChange -- the topologyChange notification as\n                  defined in BRIDGE-MIB.\n\ninconsistency -- the stpxInconsistencyUpdate notification.\n\nrootInconsistency -- the stpxRootInconsistencyUpdate \n                     notification.\n\nloopInconsistency -- the stpxLoopInconsistencyUpdate \n                     notification.")
stpxSpanningTreePathCostOperMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 6, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("short", 1), ("long", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSpanningTreePathCostOperMode.setDescription("Indicate the operational spanning tree path cost mode\non device. This mode applies to all instances of the Spanning\nTree protocol running on the device. \n\nWhen the value of this MIB object gets changed, the path cost\nof all ports will be reassigned to the default path cost\nvalues based on the new spanning tree path cost mode and the\nports' speed.\n\nWhen the value of this MIB object is long(2),\nthe stpxLongStpPortPathCost MIB object must be used in order\nto retrieve/configure the spanning tree port path cost as a\n32 bits value. The set operation on dot1dStpPortPathCost in\nBRIDGE-MIB will be rejected. While retrieving the value of\ndot1dStpPortPathCost, the maximum value of 65535 will be\nreturned if the value of stpxLongStpPortPathCost for the same\ninstance exceeds 65535.\n\nWhen the value of this MIB object is short(1),\nthe dot1dStpPortPathCost in BRIDGE-MIB must be used.")
stpxMISTPObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7))
stpxMISTPInstanceNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMISTPInstanceNumber.setDescription("The number of MISTP instances, that are supported by the device \nwhen the value of stpxSpanningTreeType is either mistp(2)\nor mistpPvstPlus(3).")
stpxMISTPInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 2))
if mibBuilder.loadTexts: stpxMISTPInstanceTable.setDescription("This table contains one entry for each instance of MISTP and \nit contains stpxMISTPInstanceNumber entries, numbered from 1\nto stpxMISTPInstanceNumber.\n\nThis table is only instantiated when the value of \nstpxSpanningTreeType is mistp(2) or mistpPvstPlus(3).")
stpxMISTPInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 2, 1)).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxMISTPInstanceIndex"))
if mibBuilder.loadTexts: stpxMISTPInstanceEntry.setDescription("A conceptual row containing the status of the MISTP \ninstance.")
stpxMISTPInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxMISTPInstanceIndex.setDescription("An arbitrary integer within the range from 1 to the value of\nstpxMISTPInstanceNumber that uniquely identifies an instance.")
stpxMISTPInstanceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 2, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxMISTPInstanceEnable.setDescription("This object indicates whether the MISTP protocol is currently\nenabled on the MISTP instance.\n\nIf this object is set to\n   'true'    - the MISTP protocol will run on this instance.\n              \n   'false'   - the MISTP protocol will stop running on this \n               instance.")
stpxMISTPInstanceVlansMapped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMISTPInstanceVlansMapped.setDescription("A string of octets containing one bit per VLAN. The\nfirst octet corresponds to VLANs with VlanIndex values\nof 0 through 7; the second octet to VLANs 8 through\n15; etc.  The most significant bit of each octet\ncorresponds to the lowest value VlanIndex in that octet.\n\nFor each VLAN, if it is mapped to this MISTP instance,\nthen the bit corresponding to that VLAN is set to '1'.")
stpxMISTPInstanceVlansMapped2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMISTPInstanceVlansMapped2k.setDescription("A string of octets containing one bit per VLAN for\nVLANS with VlanIndex values of 1024 through 2047. The\nfirst octet corresponds to VLANs with VlanIndex values\nof 1024 through 1031; the second octet to VLANs 1032\nthrough 1039; etc.  The most significant bit of each\noctet corresponds to the lowest value VlanIndex in that\noctet.\n\nFor each VLAN, if it is mapped to this MISTP instance,\nthen the bit corresponding to that VLAN is set to '1'.\n\nThis object is only instantiated on devices with \nsupport for VlanIndex up to 4095.")
stpxMISTPInstanceVlansMapped3k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMISTPInstanceVlansMapped3k.setDescription("A string of octets containing one bit per VLAN for\nVLANS with VlanIndex values of 2048 through 3071. The\nfirst octet corresponds to VLANs with VlanIndex values\nof 2048 through 2055; the second octet to VLANs 2056\nthrough 2063; etc.  The most significant bit of each\noctet corresponds to the lowest value VlanIndex in that\noctet.\n\nFor each VLAN, if it is mapped to this MISTP instance,\nthen the bit corresponding to that VLAN is set to '1'.\n\nThis object is only instantiated on devices with \nsupport for VlanIndex up to 4095.")
stpxMISTPInstanceVlansMapped4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMISTPInstanceVlansMapped4k.setDescription("A string of octets containing one bit per VLAN for\nVLANS with VlanIndex values of 3072 through 4095. The\nfirst octet corresponds to VLANs with VlanIndex values\nof 3072 through 3079; the second octet to VLANs 3080\nthrough 3087; etc.  The most significant bit of each\noctet corresponds to the lowest value VlanIndex in that\noctet.\n\nFor each VLAN, if it is mapped to this MISTP instance,\nthen the bit corresponding to that VLAN is set to '1'.\n\nThis object is only instantiated on devices with \nsupport for VlanIndex up to 4095.")
stpxVlanMISTPInstMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 3))
if mibBuilder.loadTexts: stpxVlanMISTPInstMapTable.setDescription("A table containing the MISTP Instance Index of the VLANs for a\nparticular management domain. \n\nThis table is only instantiated when the value of  \nstpxSpanningTreeType is mistp(2) or mistpPvstPlus(3).")
stpxVlanMISTPInstMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 3, 1))
if mibBuilder.loadTexts: stpxVlanMISTPInstMapEntry.setDescription("A conceptual row containing the MISTP Instance Index of the \nVLAN for a particular management domain.")
stpxVlanMISTPInstMapInstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxVlanMISTPInstMapInstIndex.setDescription("The MISTP instance, to which the corresponding vlan is mapped.\nIf this value of this mib object is 0,  the corresponding vlan \nis not configured to be mapped to any MISTP instance and all\nthe ports under this VLAN remain in blocking state.")
stpxVlanMISTPInstMapEditTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 4))
if mibBuilder.loadTexts: stpxVlanMISTPInstMapEditTable.setDescription("A table containing the MISTP related information for the VLANs \nin the Edit Buffers for a particular management domain.\n\nThis table is only instantiated when when the value of\nstpxSpanningTreeType is mistp(2) or mistpPvstPlus(3).")
stpxVlanMISTPInstMapEditEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 4, 1))
if mibBuilder.loadTexts: stpxVlanMISTPInstMapEditEntry.setDescription("Information about one VLAN mapping to one instance \nin the Edit Buffer for a particular management domain.")
stpxVlanMISTPInstMapEditInstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stpxVlanMISTPInstMapEditInstIndex.setDescription("The MISTP instance, to which the corresponding vlan would be \nmapped. The value of this mib object is from 0 to the value of\nstpxMISTPInstanceNumber. If setting the value of this object\nto 0, the corresponding vlan will not be mapped to a MISTP \ninstance and all the ports under this VLAN will be moved into\nthe blocking state.")
stpxPreferredMISTPInstancesTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 5))
if mibBuilder.loadTexts: stpxPreferredMISTPInstancesTable.setDescription("The table containing indications of which MISTP instances\nare preferred on which  trunk ports.  The preferred\nMISTP instances on a trunk port have a lower Path Cost value\ncompared with the MISTP instances on the trunk not in the\npreferred list. \n\nThis table is only instantiated when the value of\nstpxSpanningTreeType is mistp(2) or mistpPvstPlus(3).")
stpxPreferredMISTPInstancesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 5, 1))
if mibBuilder.loadTexts: stpxPreferredMISTPInstancesEntry.setDescription("An entry indicating which MISTP instances are preferred on\na specific trunk port.")
stpxPreferredMISTPInstancesMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 7, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxPreferredMISTPInstancesMap.setDescription("A string of octets containing one bit per MISTP instances \nin the management domain on this trunk port. The first octet\ncorresponds to MISTP instances with InstIndex values of 1 \nthrough 8; the second octet to MISTP instances 9 through 16;\netc. The most significant bit of each octet corresponds to \nthe lowest value instanceIndex in that octet. The number of \nbits for this mib object will be determined by the value of \nstpxMISTPInstanceNumber.\n\nFor each instance, if it is preferred on this trunk port,\nthen the bit corresponding to that instance is set to '1'.\n\n\nTo avoid conflicts between overlapping partial updates by\nmultiple managers, i.e., updates which modify only a portion\nof an instance of this object (e.g., enable/disable a single\ninstance on the trunk port), any SNMP Set operation \naccessing an instance of this object should also write the \nvalue of vlanTrunkPortSetSerialNo.")
stpxLoopGuardObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 8))
stpxLoopGuardConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 8, 1))
if mibBuilder.loadTexts: stpxLoopGuardConfigTable.setDescription("A table containing a list of the bridge ports for which\nSpanning Tree LoopGuard capability can be configured.")
stpxLoopGuardConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 8, 1, 1)).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxLoopGuardConfigPortIndex"))
if mibBuilder.loadTexts: stpxLoopGuardConfigEntry.setDescription("A bridge port for which Spanning Tree LoopGuard \ncapability can be configured.")
stpxLoopGuardConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxLoopGuardConfigPortIndex.setDescription("The value of dot1dBasePort (i.e. dot1dBridge.1.4)\nfor the bridge port.")
stpxLoopGuardConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 8, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxLoopGuardConfigEnabled.setDescription("An indication of whether the LoopGuard capability is \nenabled on this port or not. This configuration will be\napplied to all the Spanning Tree instances in which this \nport exists.\n\nIn order to support additional Loop Guard config mode\n(default) as defined in stpxLoopGuardConfigMode other \nthan enable (true(1)) or disable (false(2)) as defined \nin this object, stpxLoopGuardConfigMode object needs to \nbe used.\n\nWhen the stpxLoopGuardConfigMode object has the value of\nenable(1), the value of stpxLoopGuardConfigEnabled for \nthe same instance will be true(1). When the \nstpxLoopGuardConfigMode object has the value of disable(2), \nthe value of stpxLoopGuardConfigEnabled for the same \ninstance will be false(2). When the stpxLoopGuardConfigMode \nobject has the value of default(3), the value of \nstpxLoopGuardConfigEnabled for the same instance will \ndepend on the object value of \nstpxLoopGuardGlobalDefaultMode.")
stpxLoopGuardConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 8, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ("default", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxLoopGuardConfigMode.setDescription("Indicates the mode of Loop Guard Feature on this \nport. This configuration will be applied to all \nthe Spanning Tree instances in which this port \nexists.\n\nenable -- the Loop Guard feature is enabled on this \n          port. \n\ndisable -- the Loop Guard feature is disabled on this \n          port.  \n\ndefault -- whether the Loop Guard feature is enabled\n           or not on this port depends on the object \n           value of stpxLoopGuardGlobalDefaultMode.")
stpxLoopInconsistencyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 8, 2))
if mibBuilder.loadTexts: stpxLoopInconsistencyTable.setDescription("A table containing a list of the bridge ports for which\na particular Spanning Tree instance has been found\nto have a loop-inconsistency. The agent creates a new\nentry in this table whenever it detects a new\nloop-inconsistency, and deletes entries\nwhen/soon after the inconsistency is no longer present.")
stpxLoopInconsistencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 8, 2, 1)).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyIndex"), (0, "CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyPortIndex"))
if mibBuilder.loadTexts: stpxLoopInconsistencyEntry.setDescription("A Spanning Tree instance on a particular port for\nwhich a Spanning Tree loop-inconsistency is currently\nin effect.")
stpxLoopInconsistencyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxLoopInconsistencyIndex.setDescription("The Spanning Tree instance id, such as the VLAN id\nof the VLAN if the object value of stpxSpanningTreeType\nis pvstPlus(1) or rapidPvstPlus(5).")
stpxLoopInconsistencyPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxLoopInconsistencyPortIndex.setDescription("The value of dot1dBasePort (i.e. dot1dBridge.1.4)\nfor the bridge port.")
stpxLoopInconsistencyState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 8, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxLoopInconsistencyState.setDescription("Indicates whether the port on a particular Spanning \nTree instance is currently in loop-inconsistent \nstate or not.")
stpxLoopGuardGlobalDefaultMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 8, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxLoopGuardGlobalDefaultMode.setDescription("Indicates the global default config mode of LoopGuard \nfeature on the device.")
stpxFastStartObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9))
stpxFastStartBpduGuardEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxFastStartBpduGuardEnable.setDescription("Indicates the global default mode of the Bpdu\nGuard feature on the device.\n\nOn platforms that does not support per port \nBpdu Guard configuration as indicated by\nthe object stpxFastStartPortBpduGuardMode,\nif  the value of this object is set to true(1), \nand the Fast Start Feature is operationally \nenabled on a port, then that port will be \nimmediately disabled when the system receives\na BPDU from that port.")
stpxFastStartBpduFilterEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxFastStartBpduFilterEnable.setDescription("Indicates the global default mode of the Bpdu \nFilter feature on the device.\n\nOn platforms that does not support per port \nBpdu Filter configuration as indicated by\nthe object stpxFastStartPortBpduFilterMode,\nif  the value of this object is set to true(1), \nand the Fast Start Feature is operationally \nenabled on a port, then no BPDUs will be \ntransmitted on this port.")
stpxFastStartPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 3))
if mibBuilder.loadTexts: stpxFastStartPortTable.setDescription("A table containing a list of the bridge ports for\nwhich Spanning Tree Port Fast Start can be\nconfigured.")
stpxFastStartPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 3, 1)).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxFastStartPortIndex"))
if mibBuilder.loadTexts: stpxFastStartPortEntry.setDescription("A bridge port for which Spanning Tree Port Fast\nStart can be configured.")
stpxFastStartPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxFastStartPortIndex.setDescription("The value of dot1dBasePort (i.e. dot1dBridge.1.4)\nfor the bridge port.")
stpxFastStartPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxFastStartPortEnable.setDescription("Indicates whether the port is operating in spantree\nfast start mode.  A port with fast start enabled is\nimmediately put in spanning tree forwarding state when\nthat port is detected by the Spanning Tree, rather \nthan starting in blocking state which is the normal \noperation.\n\nIn order to support additional Fast Start enable mode\n(enableForTrunk and default) as defined in\nstpxFastStartPortMode other than enable (true(1))\nor disable (false(2)) as defined in this object,\nstpxFastStartPortMode object needs to be used.\n\nWhen the stpxFastStartPortMode has the value of\nenable(1) or enableForTrunk(3), the value of\nstpxFastStartPortEnable for the same instance\nwill be true(1). When the stpxFastStartPortMode\nhas the value of disable(2), the value of \nstpxFastStartPortEnable for the same instance will be \nfalse(2). When the stpxFastStartPortMode has the value \nof default(4), the value of stpxFastStartPortEnable for \nthe same instance depends on the object value of \nstpxFastStartGlobalDefaultMode.")
stpxFastStartPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 3, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,4,2,3,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ("enableForTrunk", 3), ("default", 4), ("network", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxFastStartPortMode.setDescription("Indicates the mode of Fast Start Feature on the \nport. A port with fast start enabled is immediately \nput in spanning tree forwarding state when the port\nis detected by the Spanning Tree, rather than \nstarting in blocking state which is the normal \noperation.\n\nenable -- the fast start feature is enabled on this \n          port but will only take effect when the \n          object value of its \n          vlanTrunkPortDynamicStatus as specified \n          in CISCO-VTP-MIB is notTrunking(2).\n\ndisable -- the fast start feature is disabled on this \n          port.  \n\nenableForTrunk -- the fast start feature is enabled \n          on this port and will take effect \n          regardless of the object value of \n          its vlanTrunkPortDynamicStatus.\n\ndefault -- whether the fast start feature is enabled\n           or not on this port depends on the object \n           value of stpxFastStartGlobalDefaultMode.\n\nnetwork -- the fast start network mode is enabled on \n           this port.")
stpxFastStartPortBpduGuardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ("default", 3), )).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxFastStartPortBpduGuardMode.setDescription("Indicates the mode of Bpdu Guard Feature on the\nport. A port with Bpdu Guard enabled is \nimmediately disabled when the system \nreceives a BPDU from that port. \n\nenable -- the Bpdu Guard feature is enabled on this\n          port. \n\ndisable -- the Bpdu Guard feature is disabled on this\n          port.\n\ndefault -- whether the Bpdu Guard feature is enabled\n           or not on this port depends on the object\n           value of stpxFastStartBpduGuardEnable. If \n           the value of stpxFastStartBpduGuardEnable\n           is true(1) and Fast Start feature is also \n           enabled operationally on this port, then\n           this port is immediately disabled when \n           the system receives a BPDU from this port.")
stpxFastStartPortBpduFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 3, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ("default", 3), )).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxFastStartPortBpduFilterMode.setDescription("Indicates the mode of Bpdu Filter Feature on the\nport. The system will not transmit BPDUs on a port \nwith Bpdu Filter feature enabled.\n\nenable -- the Bpdu Filter feature is enabled on this \n          port. \n\ndisable -- the Bpdu Filter feature is disabled on this\n           port.\n\ndefault -- whether the Bpdu Filter feature is enabled\n           or not on this port depends on the object\n           value of stpxFastStartBpduFilterEnable. If\n           the value of stpxFastStartBpduFilterEnable\n           is true(1) and Fast Start feature is also\n           enabled operationally on this port, then\n           no BPDUs will be transmitted on this port.")
stpxFastStartGlobalDefaultMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxFastStartGlobalDefaultMode.setDescription("Indicates the global default mode of the Fast \nStart feature on the device.")
stpxFastStartOperModeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 5))
if mibBuilder.loadTexts: stpxFastStartOperModeTable.setDescription("A table containing a list of the bridge ports \nfor a particular Spanning Tree Instance.")
stpxFastStartOperModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 5, 1)).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxFastStartOperModeInstIndex"), (0, "CISCO-STP-EXTENSIONS-MIB", "stpxFastStartOperModePortIndex"))
if mibBuilder.loadTexts: stpxFastStartOperModeEntry.setDescription("An entry with port fast start oper mode \ninformation on a bridge port for a particular \nSpanning Tree Instance.")
stpxFastStartOperModeInstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxFastStartOperModeInstIndex.setDescription("The Spanning Tree instance id, such as the VLAN id \nof the VLAN if the object value of stpxSpanningTreeType\nis pvstPlus(1).")
stpxFastStartOperModePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxFastStartOperModePortIndex.setDescription("The value of dot1dBasePort (i.e. dot1dBridge.1.4)\nfor the bridge port.")
stpxFastStartOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 9, 5, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxFastStartOperMode.setDescription("Indicates the fast start operational status of the \nport on a particular Spanning Tree Instance.")
stpxBpduSkewingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 10))
stpxBpduSkewingDetectionEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 10, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxBpduSkewingDetectionEnable.setDescription("Indicates whether BPDU skewing detection feature\nis enabled or not on the system. If this object has\nthe value of true(1), then the system will detect\nwhether BPDUs received by any port on any Spanning \nTree instance are processed at an interval longer\nthan the object value of dot1dStpHelloTime in the\nBIRDGE-MIB of the Spanning Tree instance.")
stpxBpduSkewingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 10, 2))
if mibBuilder.loadTexts: stpxBpduSkewingTable.setDescription("A table containing a list of the bridge ports for \nwhich a particular Spanning Tree instance has been \ndetected to have BPDU skewing occurred since the \nobject value of stpxBpduSkewingDetectionEnable was\nlast changed to true(1).\n\nThe agent creates a new entry in this table whenever\na port in a particular Spanning Tree instance is \ndetected to be BPDU skewed since the object value of \nstpxBpduSkewingDetectionEnable object is changed to \ntrue(1). The agent deletes all the entries in this \ntable when the object value of \nstpxBpduSkewingDetectionEnable is changed to false(2)\nor the object value of stpxSpanningTreeType is \nchanged.")
stpxBpduSkewingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 10, 2, 1)).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxBpduSkewingInstanceIndex"), (0, "CISCO-STP-EXTENSIONS-MIB", "stpxBpduSkewingPortIndex"))
if mibBuilder.loadTexts: stpxBpduSkewingEntry.setDescription("A Spanning Tree instance on a particular port for\nwhich BPDU skewing has been detected.")
stpxBpduSkewingInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxBpduSkewingInstanceIndex.setDescription("The Spanning Tree instance id, such as the VLAN id \nof the VLAN if the object value of stpxSpanningTreeType \nis pvstPlus(1).")
stpxBpduSkewingPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxBpduSkewingPortIndex.setDescription("The value of dot1dBasePort (i.e. dot1dBridge.1.4)\nfor the bridge port.")
stpxBpduSkewingLastSkewDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 10, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxBpduSkewingLastSkewDuration.setDescription("Indicates the skew duration in milliseconds of the\nlast BPDU skewing detected.")
stpxBpduSkewingWorstSkewDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 10, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxBpduSkewingWorstSkewDuration.setDescription("Indicates the skew duration in milliseconds of the\nworst BPDU skewing detected.")
stpxBpduSkewingWorstSkewTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 10, 2, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxBpduSkewingWorstSkewTime.setDescription("Indicates the value of sysUpTime when the worst\nBPDU skewing was detected.")
stpxMSTObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11))
stpxMSTMaxInstanceNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMSTMaxInstanceNumber.setDescription("The maximum MST (Multiple Spanning Tree) instance id, \nthat can be supported by the device for Cisco proprietary\nimplementation of the MST Protocol.\n\nThis object is deprecated and replaced by \nstpxSMSTMaxInstanceID.")
stpxMSTRegionName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMSTRegionName.setDescription("The operational MST region name.")
stpxMSTRegionRevision = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMSTRegionRevision.setDescription("The operational MST region version.\n\nThis object is deprecated and replaced by \nstpxSMSTRegionRevision.")
stpxMSTInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 4))
if mibBuilder.loadTexts: stpxMSTInstanceTable.setDescription("This table contains MST instance information with\none entry for an MST instance within the range of \n0 to the object value of stpxMSTMaxInstanceNumber. \n\nThis table is deprecated and replaced by \nstpxSMSTInstanceTable.")
stpxMSTInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 4, 1)).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceIndex"))
if mibBuilder.loadTexts: stpxMSTInstanceEntry.setDescription("A conceptual row containing the MST instance \ninformation.")
stpxMSTInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxMSTInstanceIndex.setDescription("An integer that uniquely identifies an MST instance \nwithin the range of 0 to the object value of\nstpxMSTMaxInstanceNumber.\n\nThis object is deprecated and replaced by \nstpxSMSTInstanceIndex.")
stpxMSTInstanceVlansMapped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMSTInstanceVlansMapped.setDescription("A string of octets containing one bit per VLAN. The\nfirst octet corresponds to VLANs with VlanIndex values\nof 0 through 7; the second octet to VLANs 8 through\n15; etc.  The most significant bit of each octet\ncorresponds to the lowest value VlanIndex in that octet.\n\nFor each VLAN, if it is mapped to this MST instance, \nthen the bit corresponding to that VLAN is set to '1'.\n\nThis object is deprecated and replaced by \nstpxSMSTInstanceVlansMapped1k2k.")
stpxMSTInstanceVlansMapped2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMSTInstanceVlansMapped2k.setDescription("A string of octets containing one bit per VLAN for\nVLANS with VlanIndex values of 1024 through 2047. The\nfirst octet corresponds to VLANs with VlanIndex values\nof 1024 through 1031; the second octet to VLANs 1032\nthrough 1039; etc.  The most significant bit of each\noctet corresponds to the lowest value VlanIndex in that\noctet.\n\nFor each VLAN, if it is mapped to this MST instance, \nthen the bit corresponding to that VLAN is set to '1'.\n\nThis object is deprecated and replaced by \nstpxSMSTInstanceVlansMapped1k2k.")
stpxMSTInstanceVlansMapped3k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMSTInstanceVlansMapped3k.setDescription("A string of octets containing one bit per VLAN for\nVLANS with VlanIndex values of 2048 through 3071. The\nfirst octet corresponds to VLANs with VlanIndex values\nof 2048 through 2055; the second octet to VLANs 2056\nthrough 2063; etc.  The most significant bit of each\noctet corresponds to the lowest value VlanIndex in that\noctet.\n\nFor each VLAN, if it is mapped to this MST instance, \nthen the bit corresponding to that VLAN is set to '1'.\n\nThis object is deprecated and replaced by \nstpxSMSTInstanceVlansMapped3k4k.")
stpxMSTInstanceVlansMapped4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMSTInstanceVlansMapped4k.setDescription("A string of octets containing one bit per VLAN for\nVLANS with VlanIndex values of 3072 through 4095. The\nfirst octet corresponds to VLANs with VlanIndex values\nof 3072 through 3079; the second octet to VLANs 3080\nthrough 3087; etc.  The most significant bit of each\noctet corresponds to the lowest value VlanIndex in that\noctet.\n\nFor each VLAN, if it is mapped to this MST instance, \nthen the bit corresponding to that VLAN is set to '1'.\n\nThis object is deprecated and replaced by\nstpxSMSTInstanceVlansMapped3k4k.")
stpxMSTInstanceRemainingHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMSTInstanceRemainingHopCount.setDescription("The remaining hop count for this MST instance.\n\nThis object will take on value of 40 if the object value\nof stpxSMSTInstanceRemainingHopCount is greater than 40.\n\nThis object is only instantiated when the object value of\nstpxSpanningTreeType is mst(4).\n\nThis object is deprecated and replaced by \nstpxSMSTInstanceRemainingHopCount.")
stpxMSTRegionEditBufferStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("released", 1), ("acquiredBySnmp", 2), ("acquiredByNonSnmp", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMSTRegionEditBufferStatus.setDescription("Indicates the current ownership status of the unique \nRegion Config Edit Buffer. \n\nreleased -- the Edit Buffer can be acquired by any of \n            the SNMP management stations. \n\nacquiredBySnmp -- the Edit Buffer is acquired by\n            any of the SNMP management stations. \n\nacquiredByNonSnmp -- the Edit Buffer is acquired by the \n            non-SNMP users managing the device.")
stpxMSTRegionEditBufferOperation = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(3,5,2,1,4,)).subtype(namedValues=NamedValues(("other", 1), ("acquire", 2), ("releaseWithForce", 3), ("commit", 4), ("rollBack", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxMSTRegionEditBufferOperation.setDescription("Indicates the operation that is performed on the Region \nConfig Edit Buffer.\n\nother --   none of the following operations.  \n\nacquire -- acquire the Edit Buffer. This operation can \n           only be performed when the object \n           stpxMSTRegionEditBufferStatus has the value of\n           released(1). After the successful operation of \n           this action, the stpxMSTRegionEditBufferStatus\n           will be changed to acquiredBySnmp(2). \n            \nreleaseWithForce -- release the Edit Buffer acquired by\n           non-SNMP users with force and discard the changes\n           in the Edit Buffer. This operation can only be \n           performed when the object \n           stpxMSTRegionEditBufferStatus has the value of \n           acquiredByNonSnmp(2).\n\ncommit --  commit the changes in the Edit Buffer\n           and release the Edit Buffer. The successful \n           operation of this action will make the changes\n           in the Edit Buffer effective on the device.\n           This operation can only be performed when the \n           object stpxMSTRegionEditBufferStatus has the \n           value of acquiredBySnmp(3).\n \nrollBack -- discard the changes in the Edit Buffer\n           and release the Edit Buffer. This operation can \n           only be performed when the object \n           stpxMSTRegionEditBufferStatus has the value \n           of acquiredBySnmp(3).\n\nThis object always returns other(1) when it is read.")
stpxMSTRegionEditName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxMSTRegionEditName.setDescription("The MST region name in the Edit Buffer. \n\nThis object is only instantiated when the \nstpxMSTRegionEditBufferStatus has the value of \nacquiredBySnmp(2).")
stpxMSTRegionEditRevision = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxMSTRegionEditRevision.setDescription("The MST region version in the Edit Buffer. This object is\nonly instantiated when the stpxMSTRegionEditBufferStatus \nhas the value of acquiredBySnmp(2).\n\nThis object is deprecated and replaced by\nstpxSMSTRegionEditRevision.")
stpxMSTInstanceEditTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 9))
if mibBuilder.loadTexts: stpxMSTInstanceEditTable.setDescription("This table contains MST instance information in the \nEdit Buffer with one entry for each MST\ninstance numbered from 0 to stpxMSTMaxInstanceNumber. \n\nThis table is only instantiated when the \nstpxMSTRegionEditBufferStatus has the value of\nacquiredBySnmp(2).\n\nThis table is deprecated and replaced by \nstpxSMSTInstanceEditTable.")
stpxMSTInstanceEditEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 9, 1)).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceEditIndex"))
if mibBuilder.loadTexts: stpxMSTInstanceEditEntry.setDescription("A conceptual row containing MST instance information \nin the Edit Buffer.")
stpxMSTInstanceEditIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxMSTInstanceEditIndex.setDescription("An integer that uniquely identifies an MST instance \nfrom 0 to the object value of stpxMSTMaxInstanceNumber.\n\nThe instances of this table entry with \nstpxMSTInstanceEditIndex of zero can not be \nmodified.\n\nThis object is deprecated and replaced by \nstpxSMSTInstanceEditIndex.")
stpxMSTInstanceEditVlansMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 9, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxMSTInstanceEditVlansMap.setDescription("A string of octets containing one bit per VLAN. The\nfirst octet corresponds to VLANs with VlanIndex values\nof 0 through 7; the second octet to VLANs 8 through\n15; etc.  The most significant bit of each octet\ncorresponds to the lowest value VlanIndex in that octet.\n\nFor each VLAN, if it is mapped to this MST instance, \nthen the bit corresponding to that VLAN is set to \n'1'. Each VLAN can only be mapped to one unique MST \ninstance in the range from 1 to stpxMSTMaxInstanceNumber.\nIf the bit corresponding to a VLAN is changed from '1' \nto '0', then that VLAN will be automatically mapped to \nMST instance 0 by the device.\n\nThis object is deprecated and replaced by \nstpxSMSTInstanceEditVlansMap1k2k.")
stpxMSTInstanceEditVlansMap2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxMSTInstanceEditVlansMap2k.setDescription("A string of octets containing one bit per VLAN for\nVLANS with VlanIndex values of 1024 through 2047. The\nfirst octet corresponds to VLANs with VlanIndex values\nof 1024 through 1031; the second octet to VLANs 1032\nthrough 1039; etc.  The most significant bit of each\noctet corresponds to the lowest value VlanIndex in that\noctet.\n\nFor each VLAN, if it is mapped to this MST instance,\nthen the bit corresponding to that VLAN is set to\n'1'. Each VLAN can only be mapped to one unique MST\ninstance in the range from 1 to stpxMSTMaxInstanceNumber.\nIf the bit corresponding to a VLAN is changed from '1' \nto '0', then that VLAN will be automatically mapped to \nMST instance 0 by the device.\n\nThis object is deprecated and replaced by \nstpxSMSTInstanceEditVlansMap1k2k.")
stpxMSTInstanceEditVlansMap3k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 9, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxMSTInstanceEditVlansMap3k.setDescription("A string of octets containing one bit per VLAN for\nVLANS with VlanIndex values of 2048 through 3071. The\nfirst octet corresponds to VLANs with VlanIndex values\nof 2048 through 2055; the second octet to VLANs 2056\nthrough 2063; etc.  The most significant bit of each\noctet corresponds to the lowest value VlanIndex in that\noctet.\n\nFor each VLAN, if it is mapped to this MST instance,\nthen the bit corresponding to that VLAN is set to\n'1'. Each VLAN can only be mapped to one unique MST\ninstance in the range from 1 to stpxMSTMaxInstanceNumber.\nIf the bit corresponding to a VLAN is changed from '1' \nto '0', then that VLAN will be automatically mapped to \nMST instance 0 by the device.\n\nThis object is deprecated and replaced by \nstpxSMSTInstanceEditVlansMap3k4k.")
stpxMSTInstanceEditVlansMap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 9, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxMSTInstanceEditVlansMap4k.setDescription("A string of octets containing one bit per VLAN for\nVLANS with VlanIndex values of 3072 through 4095. The\nfirst octet corresponds to VLANs with VlanIndex values\nof 3072 through 3079; the second octet to VLANs 3080\nthrough 3087; etc.  The most significant bit of each\noctet corresponds to the lowest value VlanIndex in that\noctet.\n\nFor each VLAN, if it is mapped to this MST instance,\nthen the bit corresponding to that VLAN is set to\n'1'. Each VLAN can only be mapped to one unique MST\ninstance in the range from 1 to stpxMSTMaxInstanceNumber.\nIf the bit corresponding to a VLAN is changed from '1' \nto '0', then that VLAN will be automatically mapped to \nMST instance 0 by the device.\n\nThis object is deprecated and replaced by\nstpxSMSTInstanceEditVlansMap3k4k.")
stpxPreferredMSTInstancesTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 10))
if mibBuilder.loadTexts: stpxPreferredMSTInstancesTable.setDescription("The table containing indications of which MST instances \nare preferred on which  trunk ports.  The preferred\nMST instances on a trunk port have a lower Path Cost value\ncompared with the MST instances on the trunk not in the\npreferred list.")
stpxPreferredMSTInstancesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 10, 1))
if mibBuilder.loadTexts: stpxPreferredMSTInstancesEntry.setDescription("An entry indicating which MST instances are preferred on \na specific trunk port.")
stpxPreferredMSTInstancesMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxPreferredMSTInstancesMap.setDescription("A string of octets containing one bit per MST instances \non this trunk port.  The first octet corresponds to MST \ninstances of 0 through 7; the second octet to MST instances \n8 through 15; etc. The most significant bit of each octet \ncorresponds to the lowest MST instance value in that octet. \nThe number of bits for this mib object will be determined \nby the value of stpxMSTMaxInstanceNumber.\n\nFor each instance, if it is preferred on this trunk port, \nthen the bit corresponding to that instance is set to '1'.")
stpxMSTPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 11))
if mibBuilder.loadTexts: stpxMSTPortTable.setDescription("A table containing port information for the MST \nProtocol on all the bridge ports existing on the \nsystem.")
stpxMSTPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 11, 1)).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxMSTPortIndex"))
if mibBuilder.loadTexts: stpxMSTPortEntry.setDescription("An entry with port information for the MST Protocol\non a bridge port.")
stpxMSTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxMSTPortIndex.setDescription("The value of dot1dBasePort (i.e. dot1dBridge.1.4)\nfor the bridge port.")
stpxMSTPortAdminLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 11, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("pointToPoint", 1), ("shared", 2), ("auto", 3), )).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxMSTPortAdminLinkType.setDescription("Indicates the administrative link type configuration of \na bridge port for the MST protocol. \n\npointToPoint -- the port is administratively configured to\n        be connected to a point-to-point link.\n\nshared -- the port is administratively configured to be\n        connected to a shared medium. \n\nauto -- the administrative configuration of the port's \n        link type depends on link duplex of the port.\n        If the port link is full-duplex, the administrative \n        link type configuration on this port will be taken \n        as pointTopoint(1). If the port link is half-duplex, \n        the administrative link type configuration on this\n        port will be taken as shared(2).\n\nThis configuration of this object only takes effect when the\nstpxSpanningTreeType is mst(4) or rapidPvstPlus(5).\nstpxMSTPortAdminLinkType is deprecated and replaced \nwith stpxRSTPPortAdminLinkType.")
stpxMSTPortOperLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 11, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("pointToPoint", 1), ("shared", 2), ("other", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMSTPortOperLinkType.setDescription("Indicates the operational link type of a bridge port\nfor the MST protocol.\n\npointToPoint -- the port is operationally connected to\n        a point-to-point link.\n\nshared -- the port is operationally connected to \n        a shared medium.\n\nother -- none of the above.\n\nThis object is only instantiated when the object value of\nstpxSpanningTreeType is mst(4).  stpxMSTPortOperLinkType \nis deprecated and replaced with stpxRSTPPortOperLinkType.")
stpxMSTPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 11, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxMSTPortProtocolMigration.setDescription("The protocol migration control on this port. When the \nobject value of  stpxSpanningTreeType is mst(4) or \nrapidPvstPlus(5), setting true(1) to this object forces \nthe device to try using version 2 BPDUs on this port. \nWhen the object value of stpxSpanningTreeType is neither \nmst(4) nor rapidPvstPlus(5), setting true(1) to this \nobject has no effect. Setting false(2) to this object has \nno effect. This object always returns false(2) when read.\nstpxMSTPortProtocolMigration is deprecated and \nreplaced with stpxRSTPPortProtocolMigration.")
stpxMSTPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 11, 1, 5), Bits().subtype(namedValues=NamedValues(("edge", 0), ("boundary", 1), ("pvst", 2), ("stp", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMSTPortStatus.setDescription("Indicates the operational status of the port for the \nMST protocol. \n\nedge -- this port is an edge port for the MST region.\n\nboundary -- this port is a boundary port for the \n        MST region.\n\npvst --  this port is connected to a PVST/PVST+ bridge.   \n\nstp -- this port is connected to a Single Spanning\n        Tree bridge. \n\nThis object is only instantiated when the object value\nof stpxSpanningTreeType is mst(4).\n\nThis object is deprecated and replaced by \nstpxSMSTPortStatus.")
stpxMSTPortRoleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 12))
if mibBuilder.loadTexts: stpxMSTPortRoleTable.setDescription("A table containing a list of the bridge ports for a \nparticular MST instance.  This table is only instantiated \nwhen the stpxSpanningTreeType is mst(4). \n\nThis table is deprecated and replaced with \nstpxRSTPPortRoleTable.")
stpxMSTPortRoleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 12, 1)).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxMSTPortRoleInstanceIndex"), (0, "CISCO-STP-EXTENSIONS-MIB", "stpxMSTPortRolePortIndex"))
if mibBuilder.loadTexts: stpxMSTPortRoleEntry.setDescription("An entry containing the port role information for the MST\nprotocol on a port for a particular MST instance existing\non the system.")
stpxMSTPortRoleInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxMSTPortRoleInstanceIndex.setDescription("The MST instance id within the range of 0 to\nstpxMSTMaxInstanceNumber.")
stpxMSTPortRolePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxMSTPortRolePortIndex.setDescription("The value of dot1dBasePort (i.e. dot1dBridge.1.4)\nfor the bridge port.")
stpxMSTPortRoleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 12, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,7,3,5,4,2,6,)).subtype(namedValues=NamedValues(("disabled", 1), ("root", 2), ("designated", 3), ("alternate", 4), ("backUp", 5), ("boundary", 6), ("main", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxMSTPortRoleValue.setDescription("Indicates the port role on a particular MST instance\nfor the MST protocol. \n\ndisabled --  this port has no role on this MST instance. \n\nroot -- this port has the role of root port on this MST\n            instance. \n\ndesignated -- this port has the role of designated \n            port on this MST instance.\n\nalternate -- this port has the role of alternate port\n            on this MST instance.\n\nbackUp -- this port has the role of backup port on this  \n            MST instance.\n\nboundary -- this port has the role of boundary port on \n            this MST instance.\n\nmain -- this port has the role of main port on\n          this MST instance.")
stpxMSTMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 11, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxMSTMaxHopCount.setDescription("The maximum number of hops for the MST region. \n\nThis object will take on value of 40 if the object value\nof stpxSMSTMaxHopCount is greater than 40.\n\nThis object is deprecated and replaced by\nstpxSMSTMaxHopCount.")
stpxRSTPObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 12))
stpxRSTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 12, 1))
if mibBuilder.loadTexts: stpxRSTPPortTable.setDescription("A table containing port information for the RSTP \nProtocol on all the bridge ports existing in the \nsystem.")
stpxRSTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 12, 1, 1)).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxRSTPPortIndex"))
if mibBuilder.loadTexts: stpxRSTPPortEntry.setDescription("An entry with port information for the RSTP Protocol\non a bridge port.")
stpxRSTPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxRSTPPortIndex.setDescription("The value of dot1dBasePort (i.e. dot1dBridge.1.4)\nfor the bridge port.")
stpxRSTPPortAdminLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 12, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("pointToPoint", 1), ("shared", 2), ("auto", 3), )).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxRSTPPortAdminLinkType.setDescription("Indicates the administrative link type configuration of \na bridge port for the RSTP protocol. \n\npointToPoint -- the port is administratively configured to\n        be connected to a point-to-point link.\n\nshared -- the port is administratively configured to be\n        connected to a shared medium. \n\nauto -- the administrative configuration of the port's \n        link type depends on link duplex of the port.\n        If the port link is full-duplex, the administrative \n        link type configuration on this port will be taken \n        as pointTopoint(1). If the port link is half-duplex, \n        the administrative link type configuration on this\n        port will be taken as shared(2).\n\nThis configuration of this object only takes effect when the\nstpxSpanningTreeType is mst(4) or rapidPvstPlus(5).")
stpxRSTPPortOperLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 12, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("pointToPoint", 1), ("shared", 2), ("other", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxRSTPPortOperLinkType.setDescription("Indicates the operational link type of a bridge port\nfor the RSTP protocol.\n\npointToPoint -- the port is operationally connected to\n        a point-to-point link.\n\nshared -- the port is operationally connected to \n        a shared medium.\n\nother -- none of the above.\n\nThis object is only instantiated when the object value of\nstpxSpanningTreeType is mst(4) or rapidPvstPlus(5).")
stpxRSTPPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 12, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxRSTPPortProtocolMigration.setDescription("The protocol migration control on this port. When the \nobject value of  stpxSpanningTreeType is mst(4) or \nrapidPvstPlus(5), setting true(1) to this object forces \nthe device to try using version 2 BPDUs on this port. \nWhen the object value of stpxSpanningTreeType is neither \nmst(4) nor rapidPvstPlus(5), setting true(1) to \nthis object has no effect. Setting false(2) to this \nobject has no effect. This object always returns \nfalse(2) when read.")
stpxRSTPPortRoleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 12, 2))
if mibBuilder.loadTexts: stpxRSTPPortRoleTable.setDescription("A table containing a list of the bridge ports for a \nparticular Spanning Tree instance.  This table is \nonly instantiated when the stpxSpanningTreeType is mst(4) \nor rapidPvstPlus(5).")
stpxRSTPPortRoleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 12, 2, 1)).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxRSTPPortRoleInstanceIndex"), (0, "CISCO-STP-EXTENSIONS-MIB", "stpxRSTPPortRolePortIndex"))
if mibBuilder.loadTexts: stpxRSTPPortRoleEntry.setDescription("An entry containing the port role information for the RSTP\nprotocol on a port for a particular Spanning Tree instance.")
stpxRSTPPortRoleInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxRSTPPortRoleInstanceIndex.setDescription("The Spanning Tree instance id, it can either be a \nVLAN number if the stpxSpanningTreeType is rapidPvstPlus(5) \nor an MST instance id if the stpxSpanningTreeType is mst(4).")
stpxRSTPPortRolePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxRSTPPortRolePortIndex.setDescription("The value of dot1dBasePort (i.e. dot1dBridge.1.4)\nfor the bridge port.")
stpxRSTPPortRoleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 12, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,7,3,5,4,2,6,)).subtype(namedValues=NamedValues(("disabled", 1), ("root", 2), ("designated", 3), ("alternate", 4), ("backUp", 5), ("boundary", 6), ("main", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxRSTPPortRoleValue.setDescription("Indicates the port role on a particular Spanning Tree \ninstance for the RSTP protocol. \n\ndisabled --  this port has no role in this Spanning\n            Tree instance. \n\nroot -- this port has the role of root port in this\n            Spanning Tree instance. \n\ndesignated -- this port has the role of designated \n            port in this Spanning Tree instance.\n\nalternate -- this port has the role of alternate port\n            in this Spanning Tree instance.\n\nbackUp -- this port has the role of backup port in this  \n            Spanning Tree instance.\n\nboundary -- this port has the role of boundary port in \n            this Spanning Tree instance.\n\nmain -- this port has the role of main port in\n            this Spanning Tree instance.\n\nThis object could have a value of 'boundary' or 'main'\nonly when the object value of stpxSpanningTreeType is mst(4).")
stpxRSTPTransmitHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 12, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxRSTPTransmitHoldCount.setDescription("The Transmit Hold Count.")
stpxRPVSTObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 13))
stpxRPVSTPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 13, 1))
if mibBuilder.loadTexts: stpxRPVSTPortTable.setDescription("A table containing a list of the bridge ports \nfor a particular Spanning Tree Instance.\nThis table is only instantiated when the object value\nof stpxSpanningTreeType is rapidPvstPlus(5).")
stpxRPVSTPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 13, 1, 1)).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxRPVSTPortVlanIndex"), (0, "CISCO-STP-EXTENSIONS-MIB", "stpxRPVSTPortIndex"))
if mibBuilder.loadTexts: stpxRPVSTPortEntry.setDescription("An entry with port status information on a \nbridge port for a particular Spanning Tree \nInstance.")
stpxRPVSTPortVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 13, 1, 1, 1), VlanIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxRPVSTPortVlanIndex.setDescription("The VLAN id of the VLAN.")
stpxRPVSTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxRPVSTPortIndex.setDescription("The value of dot1dBasePort (i.e. dot1dBridge.1.4)\nfor the bridge port.")
stpxRPVSTPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 13, 1, 1, 3), Bits().subtype(namedValues=NamedValues(("edge", 0), ("unused1", 1), ("unused2", 2), ("stp", 3), ("dispute", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxRPVSTPortStatus.setDescription("Indicates the operational status of the port for the \nRapid PVST+ protocol.\n\nedge -- this port is an edge port for the RST region.\n\nunused1 -- unused bit 1.\n\nunused2 -- unused bit 2.\n\nstp -- this port is connected to a Single Spanning\n       Tree/PVST+ bridge.\n\ndispute -- this port, as a designated port, received an\n       inferior BPDU with a designated role and the\n       learning bit being set.")
stpxSMSTObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14))
stpxSMSTMaxInstances = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTMaxInstances.setDescription("The maximum number of MST instances that can be \nsupported by the device for IEEE MST.")
stpxSMSTMaxInstanceID = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTMaxInstanceID.setDescription("The maximum MST instance ID that can be supported \nby the device for IEEE MST.")
stpxSMSTRegionRevision = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTRegionRevision.setDescription("The operational region version for IEEE MST.")
stpxSMSTRegionEditRevision = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxSMSTRegionEditRevision.setDescription("The MST region version in the Edit Buffer for IEEE \nMST.\n\nThis object is only instantiated when the \nstpxMSTRegionEditBufferStatus has the value of \nacquiredBySnmp(2).")
stpxSMSTInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 5))
if mibBuilder.loadTexts: stpxSMSTInstanceTable.setDescription("This table contains MST instance information\nfor IEEE MST.")
stpxSMSTInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 5, 1)).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceIndex"))
if mibBuilder.loadTexts: stpxSMSTInstanceEntry.setDescription("A conceptual row containing the MST instance \ninformation for IEEE MST.")
stpxSMSTInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 5, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxSMSTInstanceIndex.setDescription("The MST instance ID, the value of which is in the range \nfrom 0 to stpxSMSTMaxInstanceID.")
stpxSMSTInstanceVlansMapped1k2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTInstanceVlansMapped1k2k.setDescription("A string of octets containing one bit per VLAN for\nVLANS with VlanIndex values of 0 through 2047. The\nfirst octet corresponds to VLANs with VlanIndex values\nof 0 through 7; the second octet to VLANs 8 through\n15; etc.  The most significant bit of each octet\ncorresponds to the lowest value VlanIndex in that octet.\n\nFor each VLAN, if it is mapped to this MST instance,\nthen the bit corresponding to that VLAN is set to '1'.\nIf the length of this string is less than 256 octets,\nany 'missing' octets are assumed to contain the value \nof zero.")
stpxSMSTInstanceVlansMapped3k4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTInstanceVlansMapped3k4k.setDescription("A string of octets containing one bit per VLAN for\nVLANS with VlanIndex values of 2048 through 4095. The\nfirst octet corresponds to VLANs with VlanIndex values\nof 2048 through 2055; the second octet to VLANs 2056\nthrough 2063; etc.  The most significant bit of each\noctet corresponds to the lowest value VlanIndex in that\noctet.\n\nFor each VLAN, if it is mapped to this MST instance,\nthen the bit corresponding to that VLAN is set to '1'.\nIf the length of this string is less than 256 octets,\nany 'missing' octets are assumed to contain the value \nof zero.")
stpxSMSTInstanceRemainingHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTInstanceRemainingHopCount.setDescription("The remaining hop count for this MST instance. If this object\nvalue is not applicable on an MST instance, then the value\nretrieved for this object for that MST instance will be -1. \n\nThis object is only instantiated when the object value of\nstpxSpanningTreeType is mst(4).")
stpxSMSTInstanceCISTRegionalRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTInstanceCISTRegionalRoot.setDescription("Indicates the Bridge Identifier (refer to BridgeId \ndefined in BRIDGE-MIB) of CIST (Common and Internal \nSpanning Tree) Regional Root for the MST region.\n\nThis object is only instantiated when the object value of\nstpxSpanningTreeType is mst(4) and stpxSMSTInstanceIndex\nis 0.")
stpxSMSTInstanceCISTIntRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTInstanceCISTIntRootCost.setDescription("Indicates the CIST Internal Root Path Cost, i.e., the\npath cost to the CIST Regional Root as specified by the\ncorresponding stpxSMSTInstanceCISTRegionalRoot for the \nMST region.\n\nThis object is only instantiated when the object value of\nstpxSpanningTreeType is mst(4) and stpxSMSTInstanceIndex\nis 0.")
stpxSMSTInstanceEditTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 6))
if mibBuilder.loadTexts: stpxSMSTInstanceEditTable.setDescription("This table contains MST instance information in the \nEdit Buffer. \n\nThis table is only instantiated when the object value\nof  stpxMSTRegionEditBufferStatus has the value of\nacquiredBySnmp(2).")
stpxSMSTInstanceEditEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 6, 1)).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceEditIndex"))
if mibBuilder.loadTexts: stpxSMSTInstanceEditEntry.setDescription("A conceptual row containing MST instance information \nin the Edit Buffer.\n\nThe total number of entries in this table has to be \nless than or equal to the object value of stpxSMSTMaxInstances.")
stpxSMSTInstanceEditIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 6, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxSMSTInstanceEditIndex.setDescription("The MST instance ID, the value of which is in the range from\n0 to stpxSMSTMaxInstanceID. \n\nThe instances of this table entry with \nstpxSMSTInstanceEditIndex of zero is automatically\ncreated by the device and can not modified.")
stpxSMSTInstanceEditVlansMap1k2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stpxSMSTInstanceEditVlansMap1k2k.setDescription("A string of octets containing one bit per VLAN for\nVLANS with VlanIndex values of 0 through 2047. The\nfirst octet corresponds to VLANs with VlanIndex values\nof 0 through 7; the second octet to VLANs 8 through\n15; etc.  The most significant bit of each octet\ncorresponds to the lowest value VlanIndex in that octet.\n\nFor each VLAN, if it is mapped to this MST instance, \nthen the bit corresponding to that VLAN is set to \n'1'. Each VLAN can only be mapped to one unique MST \ninstance with the range from 0 to stpxSMSTMaxInstanceNumber.\nIf the bit corresponding to a VLAN is changed from '1' \nto '0', then that VLAN will be automatically mapped to \nSMST instance 0 by the device. If the bit corresponding \nto a VLAN is changed from '0' to '1', then that VLAN will \nbe automatically removed from the MST instance this VLAN was \npreviously mapped to. If the length of this string is \nless than 256 octets, any 'missing' octets are assumed to \ncontain the value of zero.")
stpxSMSTInstanceEditVlansMap3k4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stpxSMSTInstanceEditVlansMap3k4k.setDescription("A string of octets containing one bit per VLAN for\nVLANS with VlanIndex values of 2048 through 4095. The\nfirst octet corresponds to VLANs with VlanIndex values\nof 2048 through 2055; the second octet to VLANs 2056 through\n2063; etc.  The most significant bit of each octet\ncorresponds to the lowest value VlanIndex in that octet.\n\nFor each VLAN, if it is mapped to this MST instance,\nthen the bit corresponding to that VLAN is set to\n'1'. Each VLAN can only be mapped to one unique MST\ninstance with the range from 0 to stpxSMSTMaxInstanceNumber.\nIf the bit corresponding to a VLAN is changed from '1'\nto '0', then that VLAN will be automatically mapped to\nSMST instance 0 by the device. If the bit corresponding\nto a VLAN is changed from '0' to '1', then that VLAN will\nbe automatically removed from the MST instance this VLAN was\npreviously mapped to. If the length of this string is \nless than 256 octets, any 'missing' octets are assumed to \ncontain the value of zero.")
stpxSMSTInstanceEditRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stpxSMSTInstanceEditRowStatus.setDescription("This object controls the creation and deletion of a row \nin stpxSMSTInstanceEditTable.\n\nWhen creating an entry in this table, 'createAndGo' method\nis used and the value of this object is set to 'active'.\nDeactivation of an 'active' entry is not allowed.  When \ndeleting an entry in this table, 'destroy' method is used. \nOnce a row becomes active, value in any other column \nwithin such a row may be modified. When a row is active, \nsetting the instance of stpxSMSTInstanceEditVlansMap1k2k\nstpxSMSTInstanceEditVlansMap3k4k for the same MST instance\nboth to the value of zero length can not be allowed.")
stpxSMSTPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 7))
if mibBuilder.loadTexts: stpxSMSTPortTable.setDescription("A table containing port information for the MST \nProtocol on all the bridge ports existing on the \nsystem.\n\nThis table is only instantiated when the object \nvalue of stpxSpanningTreeType is mst(4)")
stpxSMSTPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 7, 1)).setIndexNames((0, "CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortIndex"))
if mibBuilder.loadTexts: stpxSMSTPortEntry.setDescription("An entry with port information for the MST protocol\non a bridge port.")
stpxSMSTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: stpxSMSTPortIndex.setDescription("The value of dot1dBasePort (i.e. dot1dBridge.1.4)\nfor the bridge port.")
stpxSMSTPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 7, 1, 2), Bits().subtype(namedValues=NamedValues(("edge", 0), ("boundary", 1), ("pvst", 2), ("stp", 3), ("dispute", 4), ("rstp", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTPortStatus.setDescription("Indicates the operational status of the port for the \nMST protocol. \n\nedge -- this port is an edge port for the MST region.\n\nboundary -- this port is a boundary port for the \n        MST region.\n\npvst --  this port is connected to a PVST/PVST+ bridge.   \n\nstp -- this port is connected to a Single Spanning\n        Tree bridge.\n\ndispute -- this port, as a designated port, received an\n        inferior BPDU with a designated role and the\n        learning bit being set.\n\nrstp -- this port is connected to a RSTP bridge or an \n        MST bridge in a different MST region.")
stpxSMSTPortAdminHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 7, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxSMSTPortAdminHelloTime.setDescription("The adminitratively configured hello time in hundredth \nof seconds on a port for IEEE MST. The granularity \nof this timer is 1 second. An agent may return a badValue \nerror if a set is attempted to a value which is not a \nwhole number of seconds. This object value of zero\nmeans the hello time is not specifically configured on \nthis port and object value of stpxSMSTPortConfigedHelloTime\nretrieved for this port will take on the value of \ndot1dStpBridgeHelloTime defined in BRIDGE-MIB.")
stpxSMSTPortConfigedHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTPortConfigedHelloTime.setDescription("Indicates the effective configuration of the hello time on \na port.")
stpxSMSTPortOperHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTPortOperHelloTime.setDescription("The operational hello time in hundredth of seconds on a \nport for IEEE MST. If this object value is not\napplicable on a port, then the value retrieved on that\nport will be -1.")
stpxSMSTPortAdminMSTMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 7, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("preStandard", 1), ("auto", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxSMSTPortAdminMSTMode.setDescription("The desired MST mode of this port.\n\npreStandard -- this port is administratively configured to\n    transmit pre-standard, i.e. pre IEEE MST, BPDUs.\n\nauto -- the BPDU transmission mode of this port is based \n    on automatic detection of neighbor ports.")
stpxSMSTPortOperMSTMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 7, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("unknown", 1), ("preStandard", 2), ("standard", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTPortOperMSTMode.setDescription("Indicates the current operational MST mode of this port.\n\nunknown -- the operational mode is currently unknown.\n\npreStandard -- this port is currently operating in \n    pre-standard MSTP BPDU transmission mode.\n\nstandard -- this port is currently operating in IEEE MST \n    BPDU transmission mode.")
stpxSMSTMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpxSMSTMaxHopCount.setDescription("The maximum number of hops for the IEEE MST region.")
stpxSMSTConfigDigest = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 9), StpxMSTConfigurationDigest()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTConfigDigest.setDescription("The IEEE MST region configuration digest.")
stpxSMSTConfigPreStandardDigest = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 82, 1, 14, 10), StpxMSTConfigurationDigest()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpxSMSTConfigPreStandardDigest.setDescription("The pre-standard MST region configuration digest.")
stpxNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 2))
stpxNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 2, 0))
stpxMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 3))
stpxMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 1))
stpxMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2))

# Augmentions
vlanTrunkPortEntry, = mibBuilder.importSymbols("CISCO-VTP-MIB", "vlanTrunkPortEntry")
vlanTrunkPortEntry.registerAugmentions(("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredMISTPInstancesEntry"))
stpxPreferredMISTPInstancesEntry.setIndexNames(*vlanTrunkPortEntry.getIndexNames())
vtpVlanEditEntry, = mibBuilder.importSymbols("CISCO-VTP-MIB", "vtpVlanEditEntry")
vtpVlanEditEntry.registerAugmentions(("CISCO-STP-EXTENSIONS-MIB", "stpxVlanMISTPInstMapEditEntry"))
stpxVlanMISTPInstMapEditEntry.setIndexNames(*vtpVlanEditEntry.getIndexNames())
vtpVlanEntry, = mibBuilder.importSymbols("CISCO-VTP-MIB", "vtpVlanEntry")
vtpVlanEntry.registerAugmentions(("CISCO-STP-EXTENSIONS-MIB", "stpxVlanMISTPInstMapEntry"))
stpxVlanMISTPInstMapEntry.setIndexNames(*vtpVlanEntry.getIndexNames())
vlanTrunkPortEntry, = mibBuilder.importSymbols("CISCO-VTP-MIB", "vlanTrunkPortEntry")
vlanTrunkPortEntry.registerAugmentions(("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansEntry"))
stpxPreferredVlansEntry.setIndexNames(*vlanTrunkPortEntry.getIndexNames())
vlanTrunkPortEntry, = mibBuilder.importSymbols("CISCO-VTP-MIB", "vlanTrunkPortEntry")
vlanTrunkPortEntry.registerAugmentions(("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredMSTInstancesEntry"))
stpxPreferredMSTInstancesEntry.setIndexNames(*vlanTrunkPortEntry.getIndexNames())
dot1dStpPortEntry, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dStpPortEntry")
dot1dStpPortEntry.registerAugmentions(("CISCO-STP-EXTENSIONS-MIB", "stpxLongStpPortPathCostEntry"))
stpxLongStpPortPathCostEntry.setIndexNames(*dot1dStpPortEntry.getIndexNames())

# Notifications

stpxInconsistencyUpdate = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 82, 2, 0, 1)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxInconsistentState"), ) )
if mibBuilder.loadTexts: stpxInconsistencyUpdate.setDescription("A stpxPortInconsistencyUpdate notification is sent by a\nbridge when an instance of stpxInconsistentState is \ncreated or destroyed.  That is, when an inconsistency is\ndiscovered in the VLAN's Spanning Tree for a particular \nport, or when such an inconsistency disappears.  Note \nthat the trap is not sent if the port transitions between\ndifferent types of inconsistency.\n\nThe stpxInconsistentState value indicates the type of\ninconsistency which now exists/no longer exists for the \nrelevant VLAN on the relevant port.")
stpxRootInconsistencyUpdate = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 82, 2, 0, 2)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyState"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreeType"), ) )
if mibBuilder.loadTexts: stpxRootInconsistencyUpdate.setDescription("A stpxRootInconsistencyUpdate notification is sent by a\nbridge when an instance of stpxRootInconsistencyState\nis created or destroyed. That is, when an\nroot-inconsistency is discovered in the VLAN's or \ninstance's Spanning Tree for a particular port, or when \nsuch an root-inconsistency disappears. For creation, the \nvalue of stpxRootInconsistencyState in the notification is\ntrue(1); for deletion, the value is false(2).\n\nThe object value of stpxSpanningTreeType indicates\nwhich Spanning Tree protocol is running when an instance \nof stpxRootInconsistencyState is created or destroyed.  ")
stpxLoopInconsistencyUpdate = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 82, 2, 0, 3)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreeType"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyState"), ) )
if mibBuilder.loadTexts: stpxLoopInconsistencyUpdate.setDescription("A stpxLoopInconsistencyUpdate notification is sent by a\nbridge when an instance of stpxLoopInconsistencyState\nis created or destroyed. That is, when an\nloop-inconsistency is discovered in the VLAN's or \ninstance's Spanning Tree for a particular port, or when \nsuch an loop-inconsistency disappears. For creation, \nthe value of stpxLoopInconsistencyState in the \nnotification is true(1); for deletion, the value is \nfalse(2).\n\nThe object value of stpxSpanningTreeType indicates\nwhich Spanning Tree protocol is running when an instance\nof stpxLoopInconsistencyState is created or \ndestroyed.")

# Groups

stpxUplinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 1)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkStationLearningGenRate"), ("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkFastTransitions"), ("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkFastEnabled"), ("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkStationLearningFrames"), ) )
if mibBuilder.loadTexts: stpxUplinkGroup.setDescription("A collection of objects for managing the UplinkFast\ncapability.")
stpxPreferredVlansGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 2)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansMap"), ) )
if mibBuilder.loadTexts: stpxPreferredVlansGroup.setDescription("A collection of objects for indicating preferred VLANs.")
stpxSstpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 3)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxInconsistentState"), ) )
if mibBuilder.loadTexts: stpxSstpGroup.setDescription("A collection of objects to support Cisco's Shared Spanning\nTree Protocol (SSTP).")
stpxNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 4)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxInconsistencyUpdate"), ) )
if mibBuilder.loadTexts: stpxNotificationsGroup.setDescription("The notifications which a STP extension implementation is\nrequired to implement.")
stpxBackboneGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 5)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneFastOutRLQResponsePDUs"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneFastInRLQResponsePDUs"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneFastInRLQRequestPDUs"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneFastEnabled"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneFastInInferiorBPDUs"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneFastOutRLQRequestPDUs"), ) )
if mibBuilder.loadTexts: stpxBackboneGroup.setDescription("A collection of objects for managing the BackboneFast\ncapability.")
stpxRootGuardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 6)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyState"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootGuardConfigEnabled"), ) )
if mibBuilder.loadTexts: stpxRootGuardGroup.setDescription("A collection of objects to support root guard\ncapabilities.")
stpxRootInconsistencyNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 7)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyUpdate"), ) )
if mibBuilder.loadTexts: stpxRootInconsistencyNotificationsGroup.setDescription("The notifications which a STP root guard \nimplementation is required to implement.")
stpx4kVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 8)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansMap4k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansMap2k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansMap3k"), ) )
if mibBuilder.loadTexts: stpx4kVlanGroup.setDescription("A collection of objects providing information\nfor VLANS with VlanIndex from 1024 to 4095.")
stpxSpanningTreeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 9)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreeType"), ) )
if mibBuilder.loadTexts: stpxSpanningTreeGroup.setDescription("An object selecting what kind of spanning tree protocol.")
stpxMISTPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 10)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxVlanMISTPInstMapInstIndex"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPInstanceEnable"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPInstanceNumber"), ("CISCO-STP-EXTENSIONS-MIB", "stpxVlanMISTPInstMapEditInstIndex"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredMISTPInstancesMap"), ) )
if mibBuilder.loadTexts: stpxMISTPGroup.setDescription("A collection objects managing the information of\nMISTP feature.")
stpxLongPathCostModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 11)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreePathCostMode"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLongStpPortPathCost"), ) )
if mibBuilder.loadTexts: stpxLongPathCostModeGroup.setDescription("A collection objects managing the information of\nspanning tree path cost in 32 bits value.")
stpxPVSTVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 12)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxPVSTVlanEnable"), ) )
if mibBuilder.loadTexts: stpxPVSTVlanGroup.setDescription("A collection of objects managing the information \nof Spanning Tree PVST+ protocol VLAN configuration.")
stpxMISTPGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 13)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPInstanceVlansMapped2k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPInstanceVlansMapped3k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPInstanceVlansMapped4k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPInstanceVlansMapped"), ) )
if mibBuilder.loadTexts: stpxMISTPGroup2.setDescription("A collection objects managing the information of\nMISTP instances to VLAN mapping with the range of\nVlanIndex up to 4095.")
stpxLoopGuardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 14)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxLoopGuardConfigEnabled"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyState"), ) )
if mibBuilder.loadTexts: stpxLoopGuardGroup.setDescription("A collection of objects to support LoopGuard \ncapabilities.")
stpxLoopInconsistencyNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 15)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyUpdate"), ) )
if mibBuilder.loadTexts: stpxLoopInconsistencyNotificationsGroup.setDescription("The notifications which a STP LoopGuard \nimplementation is required to implement.")
stpxFastStartGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 16)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartBpduFilterEnable"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartBpduGuardEnable"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartPortEnable"), ) )
if mibBuilder.loadTexts: stpxFastStartGroup.setDescription("A collection of objects to support Spanning Tree Port\nFast Start feature.")
stpxBpduSkewingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 17)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxBpduSkewingDetectionEnable"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBpduSkewingWorstSkewDuration"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBpduSkewingWorstSkewTime"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBpduSkewingLastSkewDuration"), ) )
if mibBuilder.loadTexts: stpxBpduSkewingGroup.setDescription("This is an optional group with a collection of\nobjects to support Spanning Tree BPDU Skewing feature.")
stpxFastStartGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 18)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartBpduFilterEnable"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartPortMode"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGlobalDefaultMode"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartBpduGuardEnable"), ) )
if mibBuilder.loadTexts: stpxFastStartGroup2.setDescription("An optional group with a collection of objects to \nsupport Fast Start global default mode on the device.")
stpxLoopGuardGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 19)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxLoopGuardGlobalDefaultMode"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopGuardConfigMode"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyState"), ) )
if mibBuilder.loadTexts: stpxLoopGuardGroup2.setDescription("An optional group with a collection of objects to \nsupport Loop Guard global default mode on the device.")
stpxMSTGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 20)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionRevision"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceVlansMapped"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceEditVlansMap4k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTMaxInstanceNumber"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditBufferOperation"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTPortStatus"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceEditVlansMap2k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTPortAdminLinkType"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceRemainingHopCount"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceVlansMapped3k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTPortRoleValue"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditRevision"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTPortOperLinkType"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditName"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditBufferStatus"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceEditVlansMap3k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceVlansMapped4k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTPortProtocolMigration"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceVlansMapped2k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceEditVlansMap"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTMaxHopCount"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionName"), ) )
if mibBuilder.loadTexts: stpxMSTGroup.setDescription("An optional group with a collection of objects to \nsupport Multiple Spanning Tree Protocol on the device.")
stpxPreferredMSTInstancesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 21)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredMSTInstancesMap"), ) )
if mibBuilder.loadTexts: stpxPreferredMSTInstancesGroup.setDescription("An optional group with a collection of objects to\nsupport Preferred MST Instance Map feature for Multiple \nSpanning Tree Protocol on the device.")
stpxFastStartGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 22)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartPortBpduFilterMode"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartPortBpduGuardMode"), ) )
if mibBuilder.loadTexts: stpxFastStartGroup3.setDescription("An optional group with a collection of objects to\nsupport per port Bpdu Guard and Bpdu Filter mode \nconfiguration on the device.")
stpxUplinkGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 23)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkFastOperEnabled"), ) )
if mibBuilder.loadTexts: stpxUplinkGroup2.setDescription("An optional group with a collection of objects to\nmanage the UplinkFast capability.")
stpxBackboneGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 24)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneFastOperEnabled"), ) )
if mibBuilder.loadTexts: stpxBackboneGroup2.setDescription("An optional group with a collection of objects to \nmanage the BackboneFast capability.")
stpxMSTGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 25)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditRevision"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceVlansMapped4k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceEditVlansMap"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceRemainingHopCount"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionRevision"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceVlansMapped"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceEditVlansMap4k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTMaxHopCount"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditName"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditBufferStatus"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTPortStatus"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceVlansMapped2k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTMaxInstanceNumber"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceVlansMapped3k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditBufferOperation"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceEditVlansMap3k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTInstanceEditVlansMap2k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionName"), ) )
if mibBuilder.loadTexts: stpxMSTGroup2.setDescription("An optional group with a collection of objects to \nsupport Multiple Spanning Tree Protocol on the device.")
stpxRSTPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 26)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxRSTPPortRoleValue"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRSTPPortOperLinkType"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRSTPPortProtocolMigration"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRSTPPortAdminLinkType"), ) )
if mibBuilder.loadTexts: stpxRSTPGroup.setDescription("An optional group with a collection of objects to\nsupport Rapid Spanning Tree Protocol on the device.")
stpxRPVSTGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 27)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxRPVSTPortStatus"), ) )
if mibBuilder.loadTexts: stpxRPVSTGroup.setDescription("An optional group with a collection of objects to\nsupport Rapid PVST+ on the device.")
stpxExtendedSysIDGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 28)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxExtendedSysIDOperEnabled"), ("CISCO-STP-EXTENSIONS-MIB", "stpxExtendedSysIDAdminEnabled"), ) )
if mibBuilder.loadTexts: stpxExtendedSysIDGroup.setDescription("A collection of objects to manage the \nExtended System ID capability.")
stpxNotificationEnableGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 29)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationEnable"), ) )
if mibBuilder.loadTexts: stpxNotificationEnableGroup.setDescription("A collection of objects providing control on the \ngeneration of Spanning Tree notifications.")
stpxFastStartOperModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 30)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartOperMode"), ) )
if mibBuilder.loadTexts: stpxFastStartOperModeGroup.setDescription("A collection of objects providing Spanning Tree \nPort Fast Start Operatioanl information on a port.")
stpxMSTGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 31)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditBufferOperation"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditBufferStatus"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditName"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTMaxHopCount"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionName"), ) )
if mibBuilder.loadTexts: stpxMSTGroup3.setDescription("A collection of objects providing support \nfor Multiple Spanning Tree Protocol on the device.")
stpxSMSTGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 32)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTRegionRevision"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTMaxInstances"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTMaxInstanceID"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTRegionEditRevision"), ) )
if mibBuilder.loadTexts: stpxSMSTGroup.setDescription("A collection of objects providing support for\nIEEE MST on the device.")
stpxSMSTInstanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 33)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceRemainingHopCount"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceVlansMapped3k4k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceVlansMapped1k2k"), ) )
if mibBuilder.loadTexts: stpxSMSTInstanceGroup.setDescription("A collection of objects providing support for \nMST instance information for IEEE MST on the device.")
stpxSMSTInstanceEditGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 34)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceEditVlansMap3k4k"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceEditRowStatus"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceEditVlansMap1k2k"), ) )
if mibBuilder.loadTexts: stpxSMSTInstanceEditGroup.setDescription("A collection of objects providing support for MST \ninstance edit information for IEEE MST on the device.")
stpxSMSTPortStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 35)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortStatus"), ) )
if mibBuilder.loadTexts: stpxSMSTPortStatusGroup.setDescription("A collection of objects providing support for  \nport status information for MST Protocol on the\ndevice.")
stpxSMSTPortHelloTimeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 36)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortConfigedHelloTime"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortOperHelloTime"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortAdminHelloTime"), ) )
if mibBuilder.loadTexts: stpxSMSTPortHelloTimeGroup.setDescription("A collection of objects providing support for per \nport hello time information for IEEE MST on the device.")
stpxSMSTInstanceCISTGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 37)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceCISTRegionalRoot"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceCISTIntRootCost"), ) )
if mibBuilder.loadTexts: stpxSMSTInstanceCISTGroup.setDescription("A collection of objects providing information about \nCommon and Internal Spanning Tree (CIST) for IEEE \nMST on the device.")
stpxPathCostOperModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 38)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreePathCostOperMode"), ) )
if mibBuilder.loadTexts: stpxPathCostOperModeGroup.setDescription("A collection of objects providing information about \noperational spanning tree path cost mode.")
stpxRSTPTransmitHoldCountGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 39)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxRSTPTransmitHoldCount"), ) )
if mibBuilder.loadTexts: stpxRSTPTransmitHoldCountGroup.setDescription("A collection of objects providing information for\nconfiguration of transmit hold count for Rapid Spanning\nTree Protocol.")
stpxSMSTPortMSTModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 40)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortOperMSTMode"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortAdminMSTMode"), ) )
if mibBuilder.loadTexts: stpxSMSTPortMSTModeGroup.setDescription("A collection of objects providing information for port \nMST mode configuration on the device.")
stpxSMSTMaxHopCountGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 41)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTMaxHopCount"), ) )
if mibBuilder.loadTexts: stpxSMSTMaxHopCountGroup.setDescription("A collection of objects providing information for \nconfiguration of IEEE MST maximum hop count.")
stpxSMSTConfigDigestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 42)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTConfigPreStandardDigest"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTConfigDigest"), ) )
if mibBuilder.loadTexts: stpxSMSTConfigDigestGroup.setDescription("A collection of objects providing information for\nMST configuration digests on the device.")
stpxMSTGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 2, 43)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditBufferOperation"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditBufferStatus"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionEditName"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTRegionName"), ) )
if mibBuilder.loadTexts: stpxMSTGroup4.setDescription("A collection of objects providing support \nfor Multiple Spanning Tree Protocol on the device.")

# Compliances

stpxMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 1, 1)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationsGroup"), ) )
if mibBuilder.loadTexts: stpxMIBCompliance.setDescription("The compliance statement for entities which implement\nCisco STP Extensions MIB.")
stpxMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 1, 2)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationsGroup"), ) )
if mibBuilder.loadTexts: stpxMIBCompliance2.setDescription("The compliance statement for entities which implement\nCisco STP Extensions MIB.")
stpxMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 1, 3)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpx4kVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootGuardGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationsGroup"), ) )
if mibBuilder.loadTexts: stpxMIBCompliance3.setDescription("The compliance statement for entities which implement\nCisco STP Extensions MIB.")
stpxMIBCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 1, 4)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpx4kVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLongPathCostModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootGuardGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationsGroup"), ) )
if mibBuilder.loadTexts: stpxMIBCompliance4.setDescription("The compliance statement for entities which implement\nCisco STP Extensions MIB.")
stpxMIBCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 1, 5)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxPVSTVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpx4kVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLongPathCostModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopGuardGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootGuardGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup"), ) )
if mibBuilder.loadTexts: stpxMIBCompliance5.setDescription("The compliance statement for entities which implement\nCisco STP Extensions MIB.")
stpxMIBCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 1, 6)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLongPathCostModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPVSTVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopGuardGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredMSTInstancesGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBpduSkewingGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpx4kVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSstpGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootGuardGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreeGroup"), ) )
if mibBuilder.loadTexts: stpxMIBCompliance6.setDescription("The compliance statement for entities which implement\nCisco STP Extensions MIB.")
stpxMIBCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 1, 7)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopGuardGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredMSTInstancesGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup3"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLongPathCostModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBpduSkewingGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSstpGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPVSTVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpx4kVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRSTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRPVSTGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootGuardGroup"), ) )
if mibBuilder.loadTexts: stpxMIBCompliance7.setDescription("The compliance statement for entities which implement\nCisco STP Extensions MIB.")
stpxMIBCompliance8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 1, 8)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopGuardGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredMSTInstancesGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup3"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLongPathCostModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartOperModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationEnableGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBpduSkewingGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSstpGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPVSTVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpx4kVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRSTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxExtendedSysIDGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRPVSTGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootGuardGroup"), ) )
if mibBuilder.loadTexts: stpxMIBCompliance8.setDescription("The compliance statement for entities which implement\nCisco STP Extensions MIB.")
stpxMIBCompliance9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 1, 9)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTGroup3"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopGuardGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup3"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLongPathCostModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartOperModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationEnableGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBpduSkewingGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRPVSTGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSstpGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPVSTVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpx4kVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRSTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceEditGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortStatusGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxExtendedSysIDGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortHelloTimeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootGuardGroup"), ) )
if mibBuilder.loadTexts: stpxMIBCompliance9.setDescription("The compliance statement for entities which implement\nCisco STP Extensions MIB.")
stpxMIBCompliance10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 1, 10)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceEditGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPVSTVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopGuardGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRPVSTGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpx4kVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceCISTGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRSTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup3"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLongPathCostModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTGroup3"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartOperModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxExtendedSysIDGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortStatusGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationEnableGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSstpGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortHelloTimeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootGuardGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBpduSkewingGroup"), ) )
if mibBuilder.loadTexts: stpxMIBCompliance10.setDescription("The compliance statement for entities which implement\nCisco STP Extensions MIB.")
stpxMIBCompliance11 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 1, 11)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceEditGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPVSTVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopGuardGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRPVSTGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpx4kVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceCISTGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRSTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup3"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLongPathCostModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTGroup3"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartOperModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxExtendedSysIDGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortStatusGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationEnableGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSstpGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPathCostOperModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortHelloTimeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootGuardGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBpduSkewingGroup"), ) )
if mibBuilder.loadTexts: stpxMIBCompliance11.setDescription("The compliance statement for entities which implement\nCisco STP Extensions MIB.")
stpxMIBCompliance12 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 82, 3, 1, 12)).setObjects(*(("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceEditGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortMSTModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTConfigDigestGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPVSTVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopGuardGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRSTPTransmitHoldCountGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpx4kVlanGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceCISTGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLoopInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSpanningTreeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootInconsistencyNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBackboneGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRSTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartGroup3"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTInstanceGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxLongPathCostModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTMaxHopCountGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortStatusGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMSTGroup4"), ("CISCO-STP-EXTENSIONS-MIB", "stpxFastStartOperModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxExtendedSysIDGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationsGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxUplinkGroup2"), ("CISCO-STP-EXTENSIONS-MIB", "stpxNotificationEnableGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRPVSTGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPreferredVlansGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSstpGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxPathCostOperModeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxSMSTPortHelloTimeGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxRootGuardGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxMISTPGroup"), ("CISCO-STP-EXTENSIONS-MIB", "stpxBpduSkewingGroup"), ) )
if mibBuilder.loadTexts: stpxMIBCompliance12.setDescription("The compliance statement for entities which implement\nCisco STP Extensions MIB.")

# Exports

# Module identity
mibBuilder.exportSymbols("CISCO-STP-EXTENSIONS-MIB", PYSNMP_MODULE_ID=ciscoStpExtensionsMIB)

# Types
mibBuilder.exportSymbols("CISCO-STP-EXTENSIONS-MIB", StpxMSTConfigurationDigest=StpxMSTConfigurationDigest)

# Objects
mibBuilder.exportSymbols("CISCO-STP-EXTENSIONS-MIB", ciscoStpExtensionsMIB=ciscoStpExtensionsMIB, stpxObjects=stpxObjects, stpxUplinkFastObjects=stpxUplinkFastObjects, stpxUplinkFastEnabled=stpxUplinkFastEnabled, stpxUplinkFastTransitions=stpxUplinkFastTransitions, stpxUplinkStationLearningGenRate=stpxUplinkStationLearningGenRate, stpxUplinkStationLearningFrames=stpxUplinkStationLearningFrames, stpxUplinkFastOperEnabled=stpxUplinkFastOperEnabled, stpxVlanObjects=stpxVlanObjects, stpxPreferredVlansTable=stpxPreferredVlansTable, stpxPreferredVlansEntry=stpxPreferredVlansEntry, stpxPreferredVlansMap=stpxPreferredVlansMap, stpxPreferredVlansMap2k=stpxPreferredVlansMap2k, stpxPreferredVlansMap3k=stpxPreferredVlansMap3k, stpxPreferredVlansMap4k=stpxPreferredVlansMap4k, stpxPVSTVlanTable=stpxPVSTVlanTable, stpxPVSTVlanEntry=stpxPVSTVlanEntry, stpxPVSTVlanIndex=stpxPVSTVlanIndex, stpxPVSTVlanEnable=stpxPVSTVlanEnable, stpxInconsistencyObjects=stpxInconsistencyObjects, stpxInconsistencyTable=stpxInconsistencyTable, stpxInconsistencyEntry=stpxInconsistencyEntry, stpxVlanIndex=stpxVlanIndex, stpxPortIndex=stpxPortIndex, stpxInconsistentState=stpxInconsistentState, stpxBackboneFastObjects=stpxBackboneFastObjects, stpxBackboneFastEnabled=stpxBackboneFastEnabled, stpxBackboneFastInInferiorBPDUs=stpxBackboneFastInInferiorBPDUs, stpxBackboneFastInRLQRequestPDUs=stpxBackboneFastInRLQRequestPDUs, stpxBackboneFastInRLQResponsePDUs=stpxBackboneFastInRLQResponsePDUs, stpxBackboneFastOutRLQRequestPDUs=stpxBackboneFastOutRLQRequestPDUs, stpxBackboneFastOutRLQResponsePDUs=stpxBackboneFastOutRLQResponsePDUs, stpxBackboneFastOperEnabled=stpxBackboneFastOperEnabled, stpxRootGuardObjects=stpxRootGuardObjects, stpxRootGuardConfigTable=stpxRootGuardConfigTable, stpxRootGuardConfigEntry=stpxRootGuardConfigEntry, stpxRootGuardConfigPortIndex=stpxRootGuardConfigPortIndex, stpxRootGuardConfigEnabled=stpxRootGuardConfigEnabled, stpxRootInconsistencyTable=stpxRootInconsistencyTable, stpxRootInconsistencyEntry=stpxRootInconsistencyEntry, stpxRootInconsistencyIndex=stpxRootInconsistencyIndex, stpxRootInconsistencyPortIndex=stpxRootInconsistencyPortIndex, stpxRootInconsistencyState=stpxRootInconsistencyState, stpxSpanningTreeObjects=stpxSpanningTreeObjects, stpxSpanningTreeType=stpxSpanningTreeType, stpxSpanningTreePathCostMode=stpxSpanningTreePathCostMode, stpxLongStpPortPathCostTable=stpxLongStpPortPathCostTable, stpxLongStpPortPathCostEntry=stpxLongStpPortPathCostEntry, stpxLongStpPortPathCost=stpxLongStpPortPathCost, stpxExtendedSysIDAdminEnabled=stpxExtendedSysIDAdminEnabled, stpxExtendedSysIDOperEnabled=stpxExtendedSysIDOperEnabled, stpxNotificationEnable=stpxNotificationEnable, stpxSpanningTreePathCostOperMode=stpxSpanningTreePathCostOperMode, stpxMISTPObjects=stpxMISTPObjects, stpxMISTPInstanceNumber=stpxMISTPInstanceNumber, stpxMISTPInstanceTable=stpxMISTPInstanceTable, stpxMISTPInstanceEntry=stpxMISTPInstanceEntry, stpxMISTPInstanceIndex=stpxMISTPInstanceIndex, stpxMISTPInstanceEnable=stpxMISTPInstanceEnable, stpxMISTPInstanceVlansMapped=stpxMISTPInstanceVlansMapped, stpxMISTPInstanceVlansMapped2k=stpxMISTPInstanceVlansMapped2k, stpxMISTPInstanceVlansMapped3k=stpxMISTPInstanceVlansMapped3k, stpxMISTPInstanceVlansMapped4k=stpxMISTPInstanceVlansMapped4k, stpxVlanMISTPInstMapTable=stpxVlanMISTPInstMapTable, stpxVlanMISTPInstMapEntry=stpxVlanMISTPInstMapEntry, stpxVlanMISTPInstMapInstIndex=stpxVlanMISTPInstMapInstIndex, stpxVlanMISTPInstMapEditTable=stpxVlanMISTPInstMapEditTable, stpxVlanMISTPInstMapEditEntry=stpxVlanMISTPInstMapEditEntry, stpxVlanMISTPInstMapEditInstIndex=stpxVlanMISTPInstMapEditInstIndex, stpxPreferredMISTPInstancesTable=stpxPreferredMISTPInstancesTable, stpxPreferredMISTPInstancesEntry=stpxPreferredMISTPInstancesEntry, stpxPreferredMISTPInstancesMap=stpxPreferredMISTPInstancesMap, stpxLoopGuardObjects=stpxLoopGuardObjects, stpxLoopGuardConfigTable=stpxLoopGuardConfigTable, stpxLoopGuardConfigEntry=stpxLoopGuardConfigEntry, stpxLoopGuardConfigPortIndex=stpxLoopGuardConfigPortIndex, stpxLoopGuardConfigEnabled=stpxLoopGuardConfigEnabled, stpxLoopGuardConfigMode=stpxLoopGuardConfigMode, stpxLoopInconsistencyTable=stpxLoopInconsistencyTable, stpxLoopInconsistencyEntry=stpxLoopInconsistencyEntry, stpxLoopInconsistencyIndex=stpxLoopInconsistencyIndex, stpxLoopInconsistencyPortIndex=stpxLoopInconsistencyPortIndex, stpxLoopInconsistencyState=stpxLoopInconsistencyState, stpxLoopGuardGlobalDefaultMode=stpxLoopGuardGlobalDefaultMode, stpxFastStartObjects=stpxFastStartObjects, stpxFastStartBpduGuardEnable=stpxFastStartBpduGuardEnable, stpxFastStartBpduFilterEnable=stpxFastStartBpduFilterEnable, stpxFastStartPortTable=stpxFastStartPortTable, stpxFastStartPortEntry=stpxFastStartPortEntry, stpxFastStartPortIndex=stpxFastStartPortIndex, stpxFastStartPortEnable=stpxFastStartPortEnable, stpxFastStartPortMode=stpxFastStartPortMode, stpxFastStartPortBpduGuardMode=stpxFastStartPortBpduGuardMode, stpxFastStartPortBpduFilterMode=stpxFastStartPortBpduFilterMode, stpxFastStartGlobalDefaultMode=stpxFastStartGlobalDefaultMode, stpxFastStartOperModeTable=stpxFastStartOperModeTable, stpxFastStartOperModeEntry=stpxFastStartOperModeEntry, stpxFastStartOperModeInstIndex=stpxFastStartOperModeInstIndex, stpxFastStartOperModePortIndex=stpxFastStartOperModePortIndex, stpxFastStartOperMode=stpxFastStartOperMode, stpxBpduSkewingObjects=stpxBpduSkewingObjects, stpxBpduSkewingDetectionEnable=stpxBpduSkewingDetectionEnable, stpxBpduSkewingTable=stpxBpduSkewingTable, stpxBpduSkewingEntry=stpxBpduSkewingEntry, stpxBpduSkewingInstanceIndex=stpxBpduSkewingInstanceIndex, stpxBpduSkewingPortIndex=stpxBpduSkewingPortIndex, stpxBpduSkewingLastSkewDuration=stpxBpduSkewingLastSkewDuration, stpxBpduSkewingWorstSkewDuration=stpxBpduSkewingWorstSkewDuration, stpxBpduSkewingWorstSkewTime=stpxBpduSkewingWorstSkewTime, stpxMSTObjects=stpxMSTObjects, stpxMSTMaxInstanceNumber=stpxMSTMaxInstanceNumber, stpxMSTRegionName=stpxMSTRegionName, stpxMSTRegionRevision=stpxMSTRegionRevision, stpxMSTInstanceTable=stpxMSTInstanceTable, stpxMSTInstanceEntry=stpxMSTInstanceEntry, stpxMSTInstanceIndex=stpxMSTInstanceIndex, stpxMSTInstanceVlansMapped=stpxMSTInstanceVlansMapped, stpxMSTInstanceVlansMapped2k=stpxMSTInstanceVlansMapped2k, stpxMSTInstanceVlansMapped3k=stpxMSTInstanceVlansMapped3k, stpxMSTInstanceVlansMapped4k=stpxMSTInstanceVlansMapped4k, stpxMSTInstanceRemainingHopCount=stpxMSTInstanceRemainingHopCount, stpxMSTRegionEditBufferStatus=stpxMSTRegionEditBufferStatus, stpxMSTRegionEditBufferOperation=stpxMSTRegionEditBufferOperation, stpxMSTRegionEditName=stpxMSTRegionEditName, stpxMSTRegionEditRevision=stpxMSTRegionEditRevision, stpxMSTInstanceEditTable=stpxMSTInstanceEditTable)
mibBuilder.exportSymbols("CISCO-STP-EXTENSIONS-MIB", stpxMSTInstanceEditEntry=stpxMSTInstanceEditEntry, stpxMSTInstanceEditIndex=stpxMSTInstanceEditIndex, stpxMSTInstanceEditVlansMap=stpxMSTInstanceEditVlansMap, stpxMSTInstanceEditVlansMap2k=stpxMSTInstanceEditVlansMap2k, stpxMSTInstanceEditVlansMap3k=stpxMSTInstanceEditVlansMap3k, stpxMSTInstanceEditVlansMap4k=stpxMSTInstanceEditVlansMap4k, stpxPreferredMSTInstancesTable=stpxPreferredMSTInstancesTable, stpxPreferredMSTInstancesEntry=stpxPreferredMSTInstancesEntry, stpxPreferredMSTInstancesMap=stpxPreferredMSTInstancesMap, stpxMSTPortTable=stpxMSTPortTable, stpxMSTPortEntry=stpxMSTPortEntry, stpxMSTPortIndex=stpxMSTPortIndex, stpxMSTPortAdminLinkType=stpxMSTPortAdminLinkType, stpxMSTPortOperLinkType=stpxMSTPortOperLinkType, stpxMSTPortProtocolMigration=stpxMSTPortProtocolMigration, stpxMSTPortStatus=stpxMSTPortStatus, stpxMSTPortRoleTable=stpxMSTPortRoleTable, stpxMSTPortRoleEntry=stpxMSTPortRoleEntry, stpxMSTPortRoleInstanceIndex=stpxMSTPortRoleInstanceIndex, stpxMSTPortRolePortIndex=stpxMSTPortRolePortIndex, stpxMSTPortRoleValue=stpxMSTPortRoleValue, stpxMSTMaxHopCount=stpxMSTMaxHopCount, stpxRSTPObjects=stpxRSTPObjects, stpxRSTPPortTable=stpxRSTPPortTable, stpxRSTPPortEntry=stpxRSTPPortEntry, stpxRSTPPortIndex=stpxRSTPPortIndex, stpxRSTPPortAdminLinkType=stpxRSTPPortAdminLinkType, stpxRSTPPortOperLinkType=stpxRSTPPortOperLinkType, stpxRSTPPortProtocolMigration=stpxRSTPPortProtocolMigration, stpxRSTPPortRoleTable=stpxRSTPPortRoleTable, stpxRSTPPortRoleEntry=stpxRSTPPortRoleEntry, stpxRSTPPortRoleInstanceIndex=stpxRSTPPortRoleInstanceIndex, stpxRSTPPortRolePortIndex=stpxRSTPPortRolePortIndex, stpxRSTPPortRoleValue=stpxRSTPPortRoleValue, stpxRSTPTransmitHoldCount=stpxRSTPTransmitHoldCount, stpxRPVSTObjects=stpxRPVSTObjects, stpxRPVSTPortTable=stpxRPVSTPortTable, stpxRPVSTPortEntry=stpxRPVSTPortEntry, stpxRPVSTPortVlanIndex=stpxRPVSTPortVlanIndex, stpxRPVSTPortIndex=stpxRPVSTPortIndex, stpxRPVSTPortStatus=stpxRPVSTPortStatus, stpxSMSTObjects=stpxSMSTObjects, stpxSMSTMaxInstances=stpxSMSTMaxInstances, stpxSMSTMaxInstanceID=stpxSMSTMaxInstanceID, stpxSMSTRegionRevision=stpxSMSTRegionRevision, stpxSMSTRegionEditRevision=stpxSMSTRegionEditRevision, stpxSMSTInstanceTable=stpxSMSTInstanceTable, stpxSMSTInstanceEntry=stpxSMSTInstanceEntry, stpxSMSTInstanceIndex=stpxSMSTInstanceIndex, stpxSMSTInstanceVlansMapped1k2k=stpxSMSTInstanceVlansMapped1k2k, stpxSMSTInstanceVlansMapped3k4k=stpxSMSTInstanceVlansMapped3k4k, stpxSMSTInstanceRemainingHopCount=stpxSMSTInstanceRemainingHopCount, stpxSMSTInstanceCISTRegionalRoot=stpxSMSTInstanceCISTRegionalRoot, stpxSMSTInstanceCISTIntRootCost=stpxSMSTInstanceCISTIntRootCost, stpxSMSTInstanceEditTable=stpxSMSTInstanceEditTable, stpxSMSTInstanceEditEntry=stpxSMSTInstanceEditEntry, stpxSMSTInstanceEditIndex=stpxSMSTInstanceEditIndex, stpxSMSTInstanceEditVlansMap1k2k=stpxSMSTInstanceEditVlansMap1k2k, stpxSMSTInstanceEditVlansMap3k4k=stpxSMSTInstanceEditVlansMap3k4k, stpxSMSTInstanceEditRowStatus=stpxSMSTInstanceEditRowStatus, stpxSMSTPortTable=stpxSMSTPortTable, stpxSMSTPortEntry=stpxSMSTPortEntry, stpxSMSTPortIndex=stpxSMSTPortIndex, stpxSMSTPortStatus=stpxSMSTPortStatus, stpxSMSTPortAdminHelloTime=stpxSMSTPortAdminHelloTime, stpxSMSTPortConfigedHelloTime=stpxSMSTPortConfigedHelloTime, stpxSMSTPortOperHelloTime=stpxSMSTPortOperHelloTime, stpxSMSTPortAdminMSTMode=stpxSMSTPortAdminMSTMode, stpxSMSTPortOperMSTMode=stpxSMSTPortOperMSTMode, stpxSMSTMaxHopCount=stpxSMSTMaxHopCount, stpxSMSTConfigDigest=stpxSMSTConfigDigest, stpxSMSTConfigPreStandardDigest=stpxSMSTConfigPreStandardDigest, stpxNotifications=stpxNotifications, stpxNotificationsPrefix=stpxNotificationsPrefix, stpxMIBConformance=stpxMIBConformance, stpxMIBCompliances=stpxMIBCompliances, stpxMIBGroups=stpxMIBGroups)

# Notifications
mibBuilder.exportSymbols("CISCO-STP-EXTENSIONS-MIB", stpxInconsistencyUpdate=stpxInconsistencyUpdate, stpxRootInconsistencyUpdate=stpxRootInconsistencyUpdate, stpxLoopInconsistencyUpdate=stpxLoopInconsistencyUpdate)

# Groups
mibBuilder.exportSymbols("CISCO-STP-EXTENSIONS-MIB", stpxUplinkGroup=stpxUplinkGroup, stpxPreferredVlansGroup=stpxPreferredVlansGroup, stpxSstpGroup=stpxSstpGroup, stpxNotificationsGroup=stpxNotificationsGroup, stpxBackboneGroup=stpxBackboneGroup, stpxRootGuardGroup=stpxRootGuardGroup, stpxRootInconsistencyNotificationsGroup=stpxRootInconsistencyNotificationsGroup, stpx4kVlanGroup=stpx4kVlanGroup, stpxSpanningTreeGroup=stpxSpanningTreeGroup, stpxMISTPGroup=stpxMISTPGroup, stpxLongPathCostModeGroup=stpxLongPathCostModeGroup, stpxPVSTVlanGroup=stpxPVSTVlanGroup, stpxMISTPGroup2=stpxMISTPGroup2, stpxLoopGuardGroup=stpxLoopGuardGroup, stpxLoopInconsistencyNotificationsGroup=stpxLoopInconsistencyNotificationsGroup, stpxFastStartGroup=stpxFastStartGroup, stpxBpduSkewingGroup=stpxBpduSkewingGroup, stpxFastStartGroup2=stpxFastStartGroup2, stpxLoopGuardGroup2=stpxLoopGuardGroup2, stpxMSTGroup=stpxMSTGroup, stpxPreferredMSTInstancesGroup=stpxPreferredMSTInstancesGroup, stpxFastStartGroup3=stpxFastStartGroup3, stpxUplinkGroup2=stpxUplinkGroup2, stpxBackboneGroup2=stpxBackboneGroup2, stpxMSTGroup2=stpxMSTGroup2, stpxRSTPGroup=stpxRSTPGroup, stpxRPVSTGroup=stpxRPVSTGroup, stpxExtendedSysIDGroup=stpxExtendedSysIDGroup, stpxNotificationEnableGroup=stpxNotificationEnableGroup, stpxFastStartOperModeGroup=stpxFastStartOperModeGroup, stpxMSTGroup3=stpxMSTGroup3, stpxSMSTGroup=stpxSMSTGroup, stpxSMSTInstanceGroup=stpxSMSTInstanceGroup, stpxSMSTInstanceEditGroup=stpxSMSTInstanceEditGroup, stpxSMSTPortStatusGroup=stpxSMSTPortStatusGroup, stpxSMSTPortHelloTimeGroup=stpxSMSTPortHelloTimeGroup, stpxSMSTInstanceCISTGroup=stpxSMSTInstanceCISTGroup, stpxPathCostOperModeGroup=stpxPathCostOperModeGroup, stpxRSTPTransmitHoldCountGroup=stpxRSTPTransmitHoldCountGroup, stpxSMSTPortMSTModeGroup=stpxSMSTPortMSTModeGroup, stpxSMSTMaxHopCountGroup=stpxSMSTMaxHopCountGroup, stpxSMSTConfigDigestGroup=stpxSMSTConfigDigestGroup, stpxMSTGroup4=stpxMSTGroup4)

# Compliances
mibBuilder.exportSymbols("CISCO-STP-EXTENSIONS-MIB", stpxMIBCompliance=stpxMIBCompliance, stpxMIBCompliance2=stpxMIBCompliance2, stpxMIBCompliance3=stpxMIBCompliance3, stpxMIBCompliance4=stpxMIBCompliance4, stpxMIBCompliance5=stpxMIBCompliance5, stpxMIBCompliance6=stpxMIBCompliance6, stpxMIBCompliance7=stpxMIBCompliance7, stpxMIBCompliance8=stpxMIBCompliance8, stpxMIBCompliance9=stpxMIBCompliance9, stpxMIBCompliance10=stpxMIBCompliance10, stpxMIBCompliance11=stpxMIBCompliance11, stpxMIBCompliance12=stpxMIBCompliance12)
